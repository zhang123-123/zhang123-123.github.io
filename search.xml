<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>541. 反转字符串 II</title>
    <url>/2021/08/19/541.%20%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%20II/</url>
    <content><![CDATA[<h2 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h2><span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定一个字符串 s 和一个整数 k，从字符串开头算起，每 2k 个字符反转前 k 个字符。</span><br><span class="line">如果剩余字符少于 k 个，则将剩余字符全部反转。</span><br><span class="line">如果剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符，其余字符保持原样。</span><br><span class="line">示例 1：</span><br><span class="line">输入：s = &quot;abcdefg&quot;, k = 2</span><br><span class="line">输出：&quot;bacdfeg&quot;</span><br><span class="line">示例 2：</span><br><span class="line">输入：s = &quot;abcd&quot;, k = 2</span><br><span class="line">输出：&quot;bacd&quot;</span><br><span class="line">提示：</span><br><span class="line">1 &lt;= s.length &lt;= 104</span><br><span class="line">s 仅由小写英文组成</span><br><span class="line">1 &lt;= k &lt;= 104</span><br></pre></td></tr></table></figure>


<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol>
<li>使用<code>python</code> 解题，字符串是不可变类型，不能直接在原字符串上做修改，需要将其转化为 <code>list</code>，最后再返回字符串；</li>
<li>对列表的每个<code>2k</code> 个字符反转前 <code>k</code> 个字符</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseStr</span>(<span class="params">self, s: <span class="built_in">str</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        s_list = <span class="built_in">list</span>(s)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(s_list), <span class="number">2</span> * k):</span><br><span class="line">            s_list[i: i + k] = s_list[i: i + k][::-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(s_list)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s_str = <span class="string">&quot;abcdefg&quot;</span></span><br><span class="line">    k_int = <span class="number">2</span></span><br><span class="line">    s_ = Solution()</span><br><span class="line">    result = s_.reverseStr(s_str, k_int)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>

<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul>
<li>时间复杂度：<ul>
<li><code>O(n)</code>，其中<code>n</code> 是字符串 <code>s</code> 的长度。</li>
</ul>
</li>
<li>空间复杂度：<ul>
<li><code>O(n)</code>，因为使用编程语言是<code>python</code> ，字符串是不可变类型，所以需要<code>O(n)</code> 的空间将字符串转换为列表，即空间复杂度<code>O(n)</code>。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>345. 反转字符串中的元音字母</title>
    <url>/2021/08/19/345.%20%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%85%83%E9%9F%B3%E5%AD%97%E6%AF%8D/</url>
    <content><![CDATA[<h2 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h2><span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">编写一个函数，以字符串作为输入，反转该字符串中的元音字母。</span><br><span class="line">示例 1：</span><br><span class="line">输入：&quot;hello&quot;</span><br><span class="line">输出：&quot;holle&quot;</span><br><span class="line">示例 2：</span><br><span class="line">输入：&quot;leetcode&quot;</span><br><span class="line">输出：&quot;leotcede&quot;</span><br><span class="line">提示：</span><br><span class="line">元音字母不包含字母 &quot;y&quot; 。</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>元音字母 <code>a</code>/<code>A</code>/<code>e</code>/<code>E</code>/<code>i</code>/<code>I</code>/<code>o</code>/<code>O</code>/<code>u</code>/<code>U</code><br>双指针：</li>
</ul>
<ol>
<li>使用<code>python</code> 解题，字符串是不可变类型，不能直接在原字符串上做修改，需要将其转化为 <code>list</code>，最后再返回字符串；</li>
<li>定义两个指针<code>i/j</code>，分别指向首位和末位，对指针所指向内容判断。如果<code>i</code> 对应内容不是元音字母，<code>i</code> 向右移动；如果<code>j</code> 对应内容不是元音字母，<code>j</code> 向左移动；</li>
<li><code>i/j</code> 对应内容是元音字母且 <code>i &lt; j</code> ，则 <code>i/j</code> 对应内容交换，并且<code>i</code> 向右移动；<code>j</code> 向左移动。</li>
</ol>
<ul>
<li>注意：本题元音字母包含大写字母。<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseVowels</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        vowels = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;U&quot;</span>]</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        j = <span class="built_in">len</span>(s) - <span class="number">1</span></span><br><span class="line">        s_list = <span class="built_in">list</span>(s)</span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line">            <span class="keyword">if</span> s_list[i] <span class="keyword">not</span> <span class="keyword">in</span> vowels:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> s_list[j] <span class="keyword">not</span> <span class="keyword">in</span> vowels:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            s_list[i], s_list[j] = s_list[j], s_list[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(s_list)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>343. 整数拆分</title>
    <url>/2021/08/20/343.%20%E6%95%B4%E6%95%B0%E6%8B%86%E5%88%86/</url>
    <content><![CDATA[<h3 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h3><span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。</span><br><span class="line">示例 1:</span><br><span class="line">输入: 2</span><br><span class="line">输出: 1</span><br><span class="line">解释: 2 = 1 + 1, 1 × 1 = 1。</span><br><span class="line">示例 2:</span><br><span class="line">输入: 10</span><br><span class="line">输出: 36</span><br><span class="line">解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。</span><br><span class="line">说明: 你可以假设 n 不小于 2 且不大于 58。</span><br></pre></td></tr></table></figure>

<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="第一种-动态规划"><a href="#第一种-动态规划" class="headerlink" title="第一种 动态规划"></a>第一种 动态规划</h4><ul>
<li>n拆分对应的最大乘积 = i * max((n - i),(n - i)拆分的最大乘积)<h5 id="暴力求解"><a href="#暴力求解" class="headerlink" title="暴力求解"></a>暴力求解</h5>动态规划，直接求解</li>
</ul>
<h5 id="优化动态规划"><a href="#优化动态规划" class="headerlink" title="优化动态规划"></a>优化动态规划</h5><p>记录拆分对应的最大乘积，不需要每次都用动态规划求解</p>
<h4 id="第二种-纯数学"><a href="#第二种-纯数学" class="headerlink" title="第二种 纯数学"></a>第二种 纯数学</h4><p><img src="/2021/08/20/343/343_1.png?v=1&type=image" alt="343. 整数拆分"><br><img src="/2021/08/20/343/343_2.png?v=1&type=image"></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">memo = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">integerBreak</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        优化法动态规划</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> n <span class="keyword">in</span> memo:</span><br><span class="line">            <span class="keyword">return</span> memo[n]</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        max_product = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">            msg = self.integerBreak(n - i)</span><br><span class="line">            max_num = <span class="built_in">max</span>((n - i), msg)</span><br><span class="line">            memo[n - i] = max_num</span><br><span class="line">            max_product = <span class="built_in">max</span>(max_product, max_num * i)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max_product</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">integerBreak_1</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        数学法求解</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> n <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">3</span>]:</span><br><span class="line">            <span class="keyword">return</span> n - <span class="number">1</span></span><br><span class="line">        a, b = n // <span class="number">3</span>, n % <span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span> ** a</span><br><span class="line">        <span class="keyword">elif</span> b == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span> ** (a - <span class="number">1</span>) * <span class="number">4</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span> ** a * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n_int = <span class="number">4</span></span><br><span class="line">    s = Solution()</span><br><span class="line">    <span class="comment"># result = s.integerBreak(n_int)</span></span><br><span class="line">    <span class="comment"># print(result)</span></span><br><span class="line">    a, b = n_int // <span class="number">3</span>, n_int % <span class="number">3</span></span><br><span class="line">    <span class="built_in">print</span>(a, b)</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">3</span> ** a)</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">3</span> ** (a - <span class="number">1</span>) * <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">3</span> ** a * <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>82. 删除排序链表中的重复元素 II</title>
    <url>/2021/08/24/82.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0%20II/</url>
    <content><![CDATA[<h2 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h2><span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">存在一个按升序排列的链表，给你这个链表的头节点 head ，请你删除链表中所有存在数字重复情况的节点，只保留原始链表中 没有重复出现 的数字。</span><br><span class="line">返回同样按升序排列的结果链表。</span><br><span class="line">示例 1：</span><br><span class="line">输入：head = [1,2,3,3,4,4,5]</span><br><span class="line">输出：[1,2,5]</span><br><span class="line">示例 2：</span><br><span class="line">输入：head = [1,1,1,2,3]</span><br><span class="line">输出：[2,3]</span><br><span class="line">提示：</span><br><span class="line">链表中节点数目在范围 [0, 300] 内</span><br><span class="line">-100 &lt;= Node.val &lt;= 100</span><br><span class="line">题目数据保证链表已经按升序排列</span><br></pre></td></tr></table></figure>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ul>
<li>分析：给定的链表是排序，因此重复的元素在链表中出现的位置是连续的。</li>
<li>方法：一次遍历。<ul>
<li>一边遍历，一边判断相邻节点值是否相等</li>
<li>如果相等，节点值出现次数<code>count</code> 加1；</li>
<li>如果不相等，判断<code>count</code> 是否为1：<ul>
<li>如果<code>count = 1</code>，<code>p = p.next</code>;</li>
<li>如果<code>count &gt; 1</code>，<code>p.next = head.next</code>，并将<code>count</code> 置为1.</li>
</ul>
</li>
</ul>
</li>
<li>举例：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原始链表 head：1 -&gt; 2 -&gt; 2 -&gt; 2 -&gt; 3</span><br><span class="line">自定义一个节点p, 是p.next = head</span><br><span class="line">当p指向1，head指向第一个2，发现head.val == head.next.val，出现重复节点，count += 1</span><br><span class="line">head 后移，直到移动到最后一个2，这时 head.val != head.next.val，并且count &gt; 1，即删除中间重复节点</span><br><span class="line">因为此时head 指向最后一个2，head.next = 3，所以p.next = head.next</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, val=<span class="number">0</span>, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        p = ListNode(-<span class="number">101</span>)</span><br><span class="line">        p.<span class="built_in">next</span> = head</span><br><span class="line">        r = p</span><br><span class="line">        cur_count = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> head.<span class="built_in">next</span> <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> cur_count &gt; <span class="number">1</span>:</span><br><span class="line">                    p.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> head.<span class="built_in">next</span>.val == head.val:</span><br><span class="line">                cur_count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> cur_count &gt; <span class="number">1</span>:</span><br><span class="line">                    p.<span class="built_in">next</span> = head.<span class="built_in">next</span></span><br><span class="line">                    cur_count = <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> cur_count == <span class="number">1</span>:</span><br><span class="line">                    p = p.<span class="built_in">next</span></span><br><span class="line">            head = head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> r.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_list_node</span>(<span class="params">list_</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    构建链表</span></span><br><span class="line"><span class="string">    :param list_: 列表</span></span><br><span class="line"><span class="string">    :return: 链表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    root = ListNode(<span class="number">0</span>)</span><br><span class="line">    h = root</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> list_:</span><br><span class="line">        v_node = ListNode(v)</span><br><span class="line">        h.<span class="built_in">next</span> = v_node</span><br><span class="line">        h = h.<span class="built_in">next</span></span><br><span class="line">    <span class="keyword">return</span> root.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    v_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    <span class="comment"># v_list = [1, 1, 1, 3]</span></span><br><span class="line">    root_ = init_list_node(v_list)</span><br><span class="line">    s = Solution()</span><br><span class="line">    result = s.deleteDuplicates(root_)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;~&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">while</span> result:</span><br><span class="line">        <span class="built_in">print</span>(result.val)</span><br><span class="line">        result = result.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>


<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><ul>
<li>时间复杂度：<ul>
<li><code>O(n)</code>，每个节点遍历一次。</li>
</ul>
</li>
<li>空间复杂度：<ul>
<li><code>O(1)</code>，只使用常量的空间。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile 文件详解</title>
    <url>/2021/08/23/Dockerfile/</url>
    <content><![CDATA[<p><strong>Dockerfile 文件详解</strong></p>
<span id="more"></span>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li><code>Dockerfile</code> 是一个用来构建镜像的文本文件，文本内容包含一条条构建镜像所需的指令和说明。</li>
<li><code>#</code> 是 <code>Dockerfile</code> 中的注释。</li>
<li><code>Dockerfile</code> 基本结构：基础镜像、镜像元信息、镜像操作指令、容器启动时执行命令。</li>
<li><code>Docker</code> 自上而下顺序执行 <code>Dockerfile</code> 的指令，文件命名 <code>Dockerfile</code>。<h2 id="Dockerfile-指令"><a href="#Dockerfile-指令" class="headerlink" title="Dockerfile 指令"></a><code>Dockerfile</code> 指令</h2><h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a><code>FROM</code></h3></li>
<li>指定基础镜像，必须是第一条指令。</li>
</ul>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM image</span><br><span class="line">FROM image:&lt;tag&gt;</span><br><span class="line"># tag 是可选项，默认值 latest</span><br></pre></td></tr></table></figure>

<h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a><code>RUN</code></h3><ul>
<li>运行指定的命令</li>
</ul>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RUN &lt;command&gt;</span><br><span class="line">RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span><br><span class="line"># 第一种后面直接跟shell 命令</span><br><span class="line"># Linux 默认：/bin/sh -c</span><br><span class="line"># windows 默认：cmd /S /C</span><br><span class="line"># 第二种类似于函数调用</span><br><span class="line"># executable 相当于 可执行文件，param* 是两个参数</span><br><span class="line"># 举例：</span><br><span class="line">RUN /bin/bash -c source $HOME/.bashrc; echo $HOME</span><br><span class="line">RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]</span><br><span class="line"># 注意：多行命令不要写多个RUN，原因是Dockerfile 中每一个指令都会建立一层</span><br><span class="line">有可能造成镜像的臃肿、多层，不仅增加构建部署的时间，还容易出错。</span><br></pre></td></tr></table></figure>
<h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a><code>CMD</code></h3><ul>
<li>容器启动运行命令</li>
</ul>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span><br><span class="line">CMD [&quot;param1&quot;, &quot;param2&quot;]</span><br><span class="line">CMD command param1 param2</span><br><span class="line"># 举例：</span><br><span class="line">CMD [&quot;sh&quot;, &quot;-c&quot;, &quot;echo $HOME&quot;]</span><br><span class="line">CMD [&quot;echo&quot;, &quot;$HOME&quot;]</span><br><span class="line"># 注意：参数一定要使用双引号。</span><br><span class="line"># 原因：参数传递后，docker 解析的是一个 JSON array</span><br></pre></td></tr></table></figure>
<ul>
<li><code>RUN</code> 是构建容器运行的命令以及提交运行结果</li>
<li><code>CMD</code> 是容器启动时执行的命令，在构建时并不运行。</li>
</ul>
<h3 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a><code>LABEL</code></h3><ul>
<li>镜像指定标签</li>
</ul>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt;</span><br><span class="line"># 注：一个Dockerfile 可以有多个LABEL, 但是不建议写多个，如果太长需要换行可以使用\</span><br><span class="line"># 例：</span><br><span class="line">LABEL key1=value1 \</span><br><span class="line">key2=value2 \</span><br><span class="line">key3=value3</span><br></pre></td></tr></table></figure>
<h3 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a><code>MAINTAINER</code></h3><ul>
<li>指定作者</li>
</ul>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MAINTAINER &lt;name&gt;</span><br></pre></td></tr></table></figure>

<h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a><code>EXPOSE</code></h3><ul>
<li>为暴露容器运行时的监听端口给外部，但是 <code>EXPOSE</code> 并不会使容器访问主机的端口，如果想使容器与主机端口有映射关系，必须在容器启动的时候加上 <code>-P</code> 参数。</li>
</ul>
<h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a><code>ENV</code></h3><ul>
<li>设置环境变量</li>
</ul>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ENV &lt;key&gt; &lt;value&gt;</span><br><span class="line">ENV &lt;key&gt;=&lt;value&gt;</span><br><span class="line"># 语法区别：第一种是一次设置一个，第二种可以一次设置多个</span><br></pre></td></tr></table></figure>

<h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a><code>ADD</code></h3><ul>
<li>复制命令，将文件复制到镜像中。</li>
<li>相当于<code>scp</code>。只是<code>scp</code> 需要将用户名和密码的权限验证，而<code>ADD</code> 不用。</li>
</ul>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADD &lt;src&gt; &lt;dest&gt;</span><br><span class="line">ADD [&quot;src&quot;, &quot;dest&quot;]</span><br><span class="line"># &lt;dest&gt; 路径可以是容器内的绝对路径，也可以是工作目录的相对路径</span><br><span class="line"># &lt;src&gt; 可以是本地文件，也可以是一个 url</span><br><span class="line"># 例：</span><br><span class="line">ADD test path_dir/</span><br><span class="line">ADD http://www.baidu.com/ /</span><br><span class="line"># 尽量不要把&lt;src&gt; 写成一个文件夹，如果&lt;src&gt; 是一个文件夹，复制整个目录的内容，包括文件系统元文件。</span><br></pre></td></tr></table></figure>

<h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a><code>COPY</code></h3><ul>
<li>复制命令</li>
</ul>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPY &lt;src&gt; &lt;dest&gt;</span><br><span class="line">COPY [&quot;&lt;src&gt;&quot;, &quot;&lt;dest&gt;&quot;]</span><br><span class="line"># 与 ADD 区别，COPY 的 &lt;src&gt; 只能是本地文件，其他用法一致</span><br></pre></td></tr></table></figure>
<h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a><code>ENTRYPOINT</code></h3><ul>
<li>功能是启动时的默认命令</li>
</ul>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] </span><br><span class="line">ENTRYPOINT command param1 param2</span><br><span class="line"></span><br><span class="line"># 如果从上到下看到这里的话，那么你应该对这两种语法很熟悉啦。</span><br><span class="line"># 第二种就是写shell</span><br><span class="line"># 第一种就是可执行文件加参数</span><br><span class="line"># 与CMD比较说明（这俩命令太像了，而且还可以配合使用）：</span><br><span class="line"># 1. 相同点：</span><br><span class="line">-   只能写一条，如果写了多条，那么只有最后一条生效</span><br><span class="line">-   容器启动时才运行，运行时机相同</span><br><span class="line"># 2. 不同点：</span><br><span class="line">-   ENTRYPOINT不会被运行的command覆盖，而CMD则会被覆盖</span><br><span class="line">-   如果我们在Dockerfile种同时写了ENTRYPOINT和CMD，并且CMD指令不是一个完整的可执行命令，那么CMD指定的内容将会作为ENTRYPOINT的参数</span><br><span class="line"># 如下：</span><br><span class="line">FROM ubuntu</span><br><span class="line">ENTRYPOINT [&quot;top&quot;, &quot;-b&quot;]  </span><br><span class="line">CMD [&quot;-c&quot;]</span><br><span class="line"></span><br><span class="line"># 如果我们在Dockerfile种同时写了ENTRYPOINT和CMD，并且CMD是一个完整的指令，那么它们两个会互相覆盖，谁在最后谁生效</span><br><span class="line"># 如下：</span><br><span class="line">FROM ubuntu</span><br><span class="line">ENTRYPOINT [&quot;top&quot;, &quot;-b&quot;]  </span><br><span class="line">CMD ls -al</span><br><span class="line"># 那么将执行ls -al ,top -b不会执行。</span><br></pre></td></tr></table></figure>

<h3 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a><code>VOLUME</code></h3><ul>
<li>可实现挂载功能，可以将内地文件夹或者其他容器种得文件夹挂在到这个容器种</li>
</ul>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VOLUME [&quot;/data&quot;]</span><br><span class="line"># 说明：</span><br><span class="line"># [&quot;/data&quot;]可以是一个JsonArray ，也可以是多个值。所以如下几种写法都是正确的</span><br><span class="line">VOLUME [&quot;/var/log/&quot;]</span><br><span class="line">VOLUME /var/log</span><br><span class="line">VOLUME /var/log /var/db</span><br><span class="line"># 一般的使用场景为需要持久化存储数据时</span><br><span class="line"># 容器使用的是AUFS，这种文件系统不能持久化数据，当容器关闭后，所有的更改都会丢失。</span><br><span class="line"># 所以当数据需要持久化时用这个命令。</span><br></pre></td></tr></table></figure>
<h3 id="USER"><a href="#USER" class="headerlink" title="USER"></a><code>USER</code></h3><ul>
<li>设置启动容器的用户，可以是用户名或UID，所以，只有下面的两种写法是正确的</li>
</ul>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USER daemo</span><br><span class="line">USER UID</span><br><span class="line"># 注意：如果设置了容器以daemon用户去运行，那么RUN, CMD 和 ENTRYPOINT 都会以这个用户去运行</span><br></pre></td></tr></table></figure>
<h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a><code>WORKDIR</code></h3><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WORKDIR /path/to/workdir</span><br><span class="line"># 设置工作目录，对RUN,CMD,ENTRYPOINT,COPY,ADD生效。如果不存在则会创建，也可以设置多次。</span><br><span class="line"># 如：</span><br><span class="line">WORKDIR /a</span><br><span class="line">WORKDIR b</span><br><span class="line">WORKDIR c</span><br><span class="line">RUN pwd</span><br><span class="line"># pwd执行的结果是/a/b/c</span><br><span class="line"># WORKDIR也可以解析环境变量</span><br><span class="line"># 如：</span><br><span class="line">ENV DIRPATH /path</span><br><span class="line">WORKDIR $DIRPATH/$DIRNAME</span><br><span class="line">RUN pwd</span><br><span class="line"># pwd的执行结果是/path/$DIRNAME</span><br></pre></td></tr></table></figure>
<h3 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a><code>ARG</code></h3><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ARG &lt;name&gt;[=&lt;default value&gt;]</span><br><span class="line"># 设置变量命令，ARG命令定义了一个变量，在docker build创建镜像的时候，使用 --build-arg &lt;varname&gt;=&lt;value&gt;来指定参数</span><br><span class="line"># 如果用户在build镜像时指定了一个参数没有定义在Dockerfile种，那么将有一个Warning</span><br><span class="line"># 提示如下：</span><br><span class="line">[Warning] One or more build-args [foo] were not consumed.**</span><br><span class="line"># 我们可以定义一个或多个参数，如下：</span><br><span class="line">FROM busybox</span><br><span class="line">ARG user1</span><br><span class="line">ARG buildno</span><br><span class="line"># 也可以给参数一个默认值：</span><br><span class="line">FROM busybox</span><br><span class="line">ARG user1=someuser</span><br><span class="line">ARG buildno=1</span><br><span class="line"># 如果我们给了ARG定义的参数默认值，那么当build镜像时没有指定参数值，将会使用这个默认值</span><br></pre></td></tr></table></figure>
<h3 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a><code>ONBUILD</code></h3><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ONBUILD [INSTRUCTION]</span><br><span class="line"># 这个命令只对当前镜像的子镜像生效。</span><br><span class="line"># 比如当前镜像为A，在Dockerfile种添加：</span><br><span class="line">ONBUILD RUN ls -al</span><br><span class="line"># 这个 ls -al 命令不会在A镜像构建或启动的时候执行</span><br><span class="line"># 此时有一个镜像B是基于A镜像构建的，那么这个ls -al 命令会在B镜像构建的时候被执行。</span><br></pre></td></tr></table></figure>
<h3 id="STOPSIGNAL"><a href="#STOPSIGNAL" class="headerlink" title="STOPSIGNAL"></a><code>STOPSIGNAL</code></h3><p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STOPSIGNAL signal</span><br><span class="line">STOPSIGNAL命令是的作用是当容器推出时给系统发送什么样的指令</span><br></pre></td></tr></table></figure>

<h3 id="HEALTHCHECK"><a href="#HEALTHCHECK" class="headerlink" title="HEALTHCHECK"></a><code>HEALTHCHECK</code></h3><ul>
<li>容器健康状况检查命令</li>
</ul>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HEALTHCHECK [OPTIONS] CMD command</span><br><span class="line">HEALTHCHECK NONE</span><br><span class="line"># 第一个的功能是在容器内部运行一个命令来检查容器的健康状况</span><br><span class="line"># 第二个的功能是在基础镜像中取消健康检查命令</span><br><span class="line"># [OPTIONS]的选项支持以下三中选项：</span><br><span class="line">--interval=DURATION 两次检查默认的时间间隔为30秒</span><br><span class="line">--timeout=DURATION 健康检查命令运行超时时长，默认30秒</span><br><span class="line">--retries=N 当连续失败指定次数后，则容器被认为是不健康的，状态为unhealthy，默认次数是3</span><br><span class="line"># 注意：</span><br><span class="line"># HEALTHCHECK命令只能出现一次，如果出现了多次，只有最后一个生效。</span><br><span class="line"># CMD后边的命令的返回值决定了本次健康检查是否成功，具体的返回值如下：</span><br><span class="line">	0: success - 表示容器是健康的</span><br><span class="line">	1: unhealthy - 表示容器已经不能工作了</span><br><span class="line">	2: reserved - 保留值</span><br><span class="line"># 例子：</span><br><span class="line">HEALTHCHECK --interval=5m --timeout=3s \</span><br><span class="line">CMD curl -f http://localhost/ || exit 1</span><br><span class="line"># 健康检查命令是：</span><br><span class="line">curl -f http://localhost/ || exit 1</span><br><span class="line"># 两次检查的间隔时间是5秒</span><br><span class="line"># 命令超时时间为3秒</span><br></pre></td></tr></table></figure>

<h2 id="Dockerfile-构建镜像"><a href="#Dockerfile-构建镜像" class="headerlink" title="Dockerfile 构建镜像"></a><code>Dockerfile</code> 构建镜像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t 镜像名:标签名 Dockerfile路径（可以是绝对路径，也可以是相对路径）</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>Dockerfile</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 教程</title>
    <url>/2021/08/13/Docker/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><ul>
<li><code>Docker</code> 是一个开源的应用容器引擎，基于<code>Go</code>语言，并遵从<code>Apache 2.0</code> 协议开源。</li>
<li><code>Docker</code> 可以让开发者打包应用及依赖包到一个轻量级、可移植的容器，之后发布到<code>Linux</code> ，实现虚拟化。<span id="more"></span></li>
<li>容器是完全使用沙箱机制，相互之间不存在任何接口，并容器性能开销极低。</li>
<li><code>Docker</code> 官网：<code>https://www.docker.com/</code></li>
<li><code>Github Docker</code> 源码：<code>https://github.com/docker/docker-ce</code></li>
</ul>
<h2 id="2-Docker-应用场景"><a href="#2-Docker-应用场景" class="headerlink" title="2. Docker 应用场景"></a>2. Docker 应用场景</h2><ol>
<li><code>Web</code> 应用的自动化打包和发布；</li>
<li>自动化测试和持续集成、发布；</li>
<li>在服务型环境中部署和调整数据库或其他的后台应用；</li>
<li>从头编译或者扩展现有的<code>OpenShift</code>或<code>Cloud Foundry</code> 平台搭建 <code>Paas</code> 环境。</li>
</ol>
<h2 id="3-Docker-优点"><a href="#3-Docker-优点" class="headerlink" title="3. Docker 优点"></a>3. Docker 优点</h2><h3 id="3-1-快速，一致地交付应用程序"><a href="#3-1-快速，一致地交付应用程序" class="headerlink" title="3.1 快速，一致地交付应用程序"></a>3.1 快速，一致地交付应用程序</h3><ul>
<li><code>Docker</code> 允许开发人员使用提供的应用程序或服务的本地容器在标准化环境中工作，从而简化开发的生命周期。</li>
</ul>
<h3 id="3-2-响应式部署和扩展"><a href="#3-2-响应式部署和扩展" class="headerlink" title="3.2 响应式部署和扩展"></a>3.2 响应式部署和扩展</h3><ul>
<li><code>Docker</code> 是基于容器的平台，允许高度可移植的工作负载。<code>Docker </code>容器可以在开发人员的本机上，数据中心的物理或虚拟机上，云服务上或混合环境中运行。</li>
<li><code>Docker</code> 的可移植性和轻量级的特性，还可以使您轻松地完成动态管理的工作负担，并根据业务需求指示，实时扩展或拆除应用程序和服务。</li>
</ul>
<h3 id="3-在同一硬件上运行更多工作负载"><a href="#3-在同一硬件上运行更多工作负载" class="headerlink" title="3. 在同一硬件上运行更多工作负载"></a>3. 在同一硬件上运行更多工作负载</h3><ul>
<li><code>Docker</code> 轻巧快速。它为基于虚拟机管理程序的虚拟机提供了可行、经济、高效的替代方案，因此您可以利用更多的计算能力来实现业务目标。</li>
<li><code>Docker</code> 非常适合于高密度环境以及中小型部署，而您可以用更少的资源做更多的事情。</li>
</ul>
<h2 id="4-Docker-架构"><a href="#4-Docker-架构" class="headerlink" title="4. Docker 架构"></a>4. Docker 架构</h2><ul>
<li><code>Docker</code> 基本概念：镜像、容器、仓库<h3 id="4-1-镜像"><a href="#4-1-镜像" class="headerlink" title="4.1 镜像"></a>4.1 镜像</h3></li>
<li><code>Docker</code> 镜像（<code>Image</code>）相当于是<code>root</code>文件系统。类似于面向对象中的类。<h3 id="4-2-容器"><a href="#4-2-容器" class="headerlink" title="4.2 容器"></a>4.2 容器</h3></li>
<li>容器（<code>Container</code>）:  类似于面向对象中的以类创建的实例。镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停。<h3 id="4-3-仓库"><a href="#4-3-仓库" class="headerlink" title="4.3 仓库"></a>4.3 仓库</h3></li>
<li>仓库（<code>Repository</code>）: 代码控制中心，用来保存镜像。<h3 id="4-4-Docker-基本概念介绍"><a href="#4-4-Docker-基本概念介绍" class="headerlink" title="4.4 Docker 基本概念介绍"></a>4.4 Docker 基本概念介绍</h3></li>
<li><code>Docker</code> 镜像（<code>Image</code>）: 适用于创建容器的模板；</li>
<li><code>Docker</code> 容器（<code>Container</code>）: 是独立运行的一个或一组应用，是镜像运行的实体；</li>
<li><code>Docker</code> 客户端（<code>Client</code>）: <code>Docker</code> 客户端通过命令行或者其他工具使用 <code>Docker SDK</code> (<a href="https://docs.docker.com/develop/sdk/"><code>https://docs.docker.com/develop/sdk/</code></a>) 与 <code>Docker </code>的守护进程通信;</li>
<li><code>Docker</code> 主机（<code>Host</code>）: 一个物理或者虚拟的机器用于执行 <code>Docker</code> 守护进程和容器；</li>
<li><code>Docker</code> 仓库（<code>Repository</code>）: <code>Docker</code> 仓库用来保存镜像，可以理解为代码控制中的代码仓库；<code>Docker Hub</code>(<a href="https://hub.docker.com/"><code>https://hub.docker.com</code></a>) 提供了庞大的镜像集合供使用；一个 <code>Docker Registry</code> 中可以包含多个仓库（<code>Repository</code>）；每个仓库可以包含多个标签（<code>Tag</code>）；每个标签对应一个镜像；通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过  &lt;仓库名&gt;:&lt;标签&gt;  的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以  <strong>latest</strong>  作为默认标签。</li>
<li><code>Docker Machine</code>:   <code>Docker Machine</code>是一个简化<code>Docker</code>安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装<code>Docker</code>，比如<code>VirtualBox</code>、 <code>Digital Ocean</code>、<code>Microsoft Azure</code>。</li>
</ul>
<h2 id="5-Docker-安装"><a href="#5-Docker-安装" class="headerlink" title="5. Docker 安装"></a>5. Docker 安装</h2><h3 id="5-1-Centos-Docker-安装"><a href="#5-1-Centos-Docker-安装" class="headerlink" title="5.1 Centos Docker 安装"></a>5.1 Centos Docker 安装</h3><ol>
<li>卸载之前安装的版本（如果服务器上没有安装过，忽略这步操作）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine</span><br></pre></td></tr></table></figure></li>
<li>添加 <code>docker yum</code> 源<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 官方源地址</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># 2. 阿里云源</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># 3. 清华大学源</span></span><br><span class="line">yum-config-manager --add-repo https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li>
<li><code>yum</code> 安装 <code>docker</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li>
<li>验证 <code>docker</code> 是否安装成功<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure></li>
<li>配置 <code>docker</code> 开机启动<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable --now docker.service</span><br><span class="line">systemctl enable --now docker.socket</span><br></pre></td></tr></table></figure>
<h3 id="5-2-Centos8-部署docker（阿里云安装方式）"><a href="#5-2-Centos8-部署docker（阿里云安装方式）" class="headerlink" title="5.2 Centos8 部署docker（阿里云安装方式）"></a>5.2 Centos8 部署docker（阿里云安装方式）</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 安装 docker 存储依赖</span></span><br><span class="line">dnf install -y device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 设置添加docker软件阿里源</span></span><br><span class="line">dnf config-manager --add-repo=https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 运行命令，查看添加的 Docker 软件源</span></span><br><span class="line">dnf <span class="built_in">list</span> docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 运行命令安装 Docker</span></span><br><span class="line">dnf install -y docker-ce --nobest</span><br><span class="line"><span class="comment"># 5. 启动 Docker</span></span><br><span class="line">systemctl start	docker</span><br></pre></td></tr></table></figure>
<h3 id="5-3-Centos7-部署docker（阿里云安装方式）"><a href="#5-3-Centos7-部署docker（阿里云安装方式）" class="headerlink" title="5.3 Centos7 部署docker（阿里云安装方式）"></a>5.3 Centos7 部署docker（阿里云安装方式）</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 安装 docker 依赖包</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment"># 2. 设置添加docker软件阿里源</span></span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># 3. 更新并安装 Docker-CE</span></span><br><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce</span><br><span class="line"><span class="comment"># 4. 启动docker</span></span><br><span class="line">sudo service docker start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：其他注意事项在下面的注释中</span></span><br><span class="line"><span class="comment"># 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，你可以通过以下方式开启。同理可以开启各种测试版本等。</span></span><br><span class="line"><span class="comment"># vim /etc/yum.repos.d/docker-ce.repo</span></span><br><span class="line"><span class="comment">#   将 [docker-ce-test] 下方的 enabled=0 修改为 enabled=1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 安装指定版本的Docker-CE:</span></span><br><span class="line"><span class="comment"># Step 1: 查找Docker-CE的版本:</span></span><br><span class="line"><span class="comment"># yum list docker-ce.x86_64 --showduplicates | sort -r</span></span><br><span class="line"><span class="comment">#   Loading mirror speeds from cached hostfile</span></span><br><span class="line"><span class="comment">#   Loaded plugins: branch, fastestmirror, langpacks</span></span><br><span class="line"><span class="comment">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable</span></span><br><span class="line"><span class="comment">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable</span></span><br><span class="line"><span class="comment">#   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable</span></span><br><span class="line"><span class="comment">#   Available Packages</span></span><br><span class="line"><span class="comment"># Step2 : 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.0.ce.1-1.el7.centos)</span></span><br><span class="line"><span class="comment"># sudo yum -y install docker-ce-[VERSION]</span></span><br><span class="line"><span class="comment"># 注意：在某些版本之后，docker-ce安装出现了其他依赖包，如果安装失败的话请关注错误信息。例如 docker-ce 17.03 之后，需要先安装 docker-ce-selinux。</span></span><br><span class="line"><span class="comment"># yum list docker-ce-selinux- --showduplicates | sort -r</span></span><br><span class="line"><span class="comment"># sudo yum -y install docker-ce-selinux-[VERSION]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过经典网络、VPC网络内网安装时，用以下命令替换Step 2中的命令</span></span><br><span class="line"><span class="comment"># 经典网络：</span></span><br><span class="line"><span class="comment"># sudo yum-config-manager --add-repo http://mirrors.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo</span></span><br><span class="line"><span class="comment"># VPC网络：</span></span><br><span class="line"><span class="comment"># sudo yum-config-manager --add-repo http://mirrors.could.aliyuncs.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="5-4-Ubuntu-14-04-16-04-安装-docker"><a href="#5-4-Ubuntu-14-04-16-04-安装-docker" class="headerlink" title="5.4 Ubuntu 14.04 16.04 安装 docker"></a>5.4 <code>Ubuntu 14.04 16.04</code> 安装 <code>docker</code></h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apt-get 安装</span></span><br><span class="line"><span class="comment"># step 1. 安装 docker 依赖包</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apy-transport-https ca-certificates curl software-properties-common</span><br><span class="line"></span><br><span class="line"><span class="comment"># step 2: 安装GPG证书</span></span><br><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="comment"># Step 3: 写入软件源信息</span></span><br><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span></span><br><span class="line"><span class="comment"># Step 4: 更新并安装 Docker-CE</span></span><br><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：其他注意事项在下面的注释中</span></span><br><span class="line"><span class="comment"># 安装指定版本的Docker-CE:</span></span><br><span class="line"><span class="comment"># Step 1: 查找Docker-CE的版本:</span></span><br><span class="line"><span class="comment"># apt-cache madison docker-ce</span></span><br><span class="line"><span class="comment">#   docker-ce | 17.03.1~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span></span><br><span class="line"><span class="comment">#   docker-ce | 17.03.0~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span></span><br><span class="line"><span class="comment"># Step 2: 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.1~ce-0~ubuntu-xenial)</span></span><br><span class="line"><span class="comment"># sudo apt-get -y install docker-ce=[VERSION]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过经典网络、VPC网络内网安装时，用以下命令替换Step 2、Step 3中的命令</span></span><br><span class="line"><span class="comment"># 经典网络：</span></span><br><span class="line"><span class="comment"># curl -fsSL http://mirrors.aliyuncs.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span></span><br><span class="line"><span class="comment"># sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyuncs.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span></span><br><span class="line"><span class="comment"># VPC网络：</span></span><br><span class="line"><span class="comment"># curl -fsSL http://mirrors.cloud.aliyuncs.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span></span><br><span class="line"><span class="comment"># sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.cloud.aliyuncs.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-Docker-使用"><a href="#6-Docker-使用" class="headerlink" title="6. Docker 使用"></a>6. Docker 使用</h2><h3 id="6-1-Centos8-使用docker（阿里云提供方式）"><a href="#6-1-Centos8-使用docker（阿里云提供方式）" class="headerlink" title="6.1  Centos8 使用docker（阿里云提供方式）"></a>6.1  Centos8 使用docker（阿里云提供方式）</h3><h4 id="6-1-1-管理Docker-守护进程"><a href="#6-1-1-管理Docker-守护进程" class="headerlink" title="6.1.1 管理Docker 守护进程"></a>6.1.1 管理Docker 守护进程</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 Docker 状态</span></span><br><span class="line">systemctl status docker</span><br><span class="line"><span class="comment"># 启动 Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment"># 停止 Docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"><span class="comment"># 重启 Docker</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="comment"># 设置 Docker 开机启动</span></span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>
<h4 id="6-1-2-镜像加速器"><a href="#6-1-2-镜像加速器" class="headerlink" title="6.1.2 镜像加速器"></a>6.1.2 镜像加速器</h4><ul>
<li>注：命令支持（Ubuntu / CentOS）<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span> </span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://m1i2r0y7.mirror.aliyuncs.com&quot;</span>] </span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"><span class="comment"># 查看验证镜像加速器</span></span><br><span class="line">docker info</span><br></pre></td></tr></table></figure>
<h4 id="6-1-2-管理镜像"><a href="#6-1-2-管理镜像" class="headerlink" title="6.1.2 管理镜像"></a>6.1.2 管理镜像</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 获取镜像。</span></span><br><span class="line"><span class="comment"># 从Docker 镜像仓库获取镜像 docker pull</span></span><br><span class="line">docker pull [选项][Docker Registry地址[:端口号]/]仓库名[:标签]</span><br><span class="line"><span class="comment"># Docker镜像仓库地址：地址的格式一般是&lt;域名/IP&gt;[:端口号]。默认地址是Docker Hub。</span></span><br><span class="line"><span class="comment"># 仓库名：如之前所说，这里的仓库名是两段式名称，即&lt;用户名&gt;/&lt;软件名&gt;。</span></span><br><span class="line"><span class="comment"># 对于Docker Hub,如果不给出用户名，则默认为library,也就是官方镜像。</span></span><br><span class="line"><span class="comment"># 举例 拉取Apache-php5 镜像</span></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/lxepoo/apache-php5</span><br><span class="line"><span class="comment"># 修改标签（当镜像名称较长，可以修改镜像标签）</span></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/lxepoo/apache-php5:latest aliweb:v1</span><br><span class="line"><span class="comment"># 查看已有镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 强制删除镜像（默认标签latest，可以省略）</span></span><br><span class="line">docker rmi -f REPOSITORY:TAG</span><br><span class="line">docker rmi -f registry.cn-hangzhou.aliyuncs.com/lxepoo/apache-php5</span><br></pre></td></tr></table></figure>
<h4 id="6-1-3-管理容器"><a href="#6-1-3-管理容器" class="headerlink" title="6.1.3 管理容器"></a>6.1.3 管理容器</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建容器  Create a new container</span></span><br><span class="line">docker create [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line"><span class="comment"># 常用参数</span></span><br><span class="line">--name: 设置容器名称</span><br><span class="line">-p: 指定端口映射，hostPost: containerPort</span><br><span class="line">-P: 随机指定端口映射（一般不用这个参数）</span><br><span class="line">-e: 配置信息</span><br><span class="line">	例：配置mysql 超级管理员密码</span><br><span class="line">docker create --name mysql -p <span class="number">3306</span>:<span class="number">3306</span> -e MYSQL_ROOT_PASSWORD=root IMAGE_ID/IMAGE_NAME:TAG</span><br><span class="line"><span class="comment"># 容器启动</span></span><br><span class="line">docker start CONTAINER_ID/CONTAINER_NAME</span><br><span class="line"><span class="comment"># 容器删除</span></span><br><span class="line"><span class="comment"># step 1: 查看容器是否在运行</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="comment"># step 2: 如果容器运行，kill 正在运行的(可以同时kill 多个正在运行的容器)</span></span><br><span class="line">docker container kill CONTAINER_ID</span><br><span class="line"><span class="comment"># step 3: 删除容器</span></span><br><span class="line">docker rm CONTAINER_ID/CONTAINER_NAME</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 根据镜像创建容器，并进入容器</span></span><br><span class="line"><span class="comment"># e1abc**** 是 docker images 查询到的ImageID</span></span><br><span class="line">docker run -it e1abc**** /<span class="built_in">bin</span>/bash</span><br><span class="line"><span class="comment"># 2. 退出容器</span></span><br><span class="line">exit</span><br><span class="line"><span class="comment"># 3. 后台运行容器</span></span><br><span class="line"><span class="comment"># -d 表示后台运行容器</span></span><br><span class="line"><span class="comment"># --name 用于指定容器命名 apache</span></span><br><span class="line">docker run -d --name apache e1abc****</span><br><span class="line"><span class="comment"># 4. 进入后台运行容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it apache /<span class="built_in">bin</span>/bash</span><br><span class="line"><span class="comment"># 5. 查看容器ID</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 6. 容器打包成镜像</span></span><br><span class="line"><span class="comment"># 命令参数：docker commit &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]</span></span><br><span class="line">docker commit containerID/containerName repository:tag</span><br><span class="line"><span class="comment"># 7. 测试：</span></span><br><span class="line">docker commit 1c98ec1f51cb apache:tag_id</span><br><span class="line"><span class="comment"># 运行容器并将宿主机的8080端口映射到容器里去</span></span><br><span class="line">docker run -d -p <span class="number">8080</span>:<span class="number">80</span> apache:tag_id</span><br></pre></td></tr></table></figure>
<h2 id="7-制作-Docker-镜像"><a href="#7-制作-Docker-镜像" class="headerlink" title="7. 制作 Docker 镜像"></a>7. 制作 Docker 镜像</h2><h3 id="7-1-准备-Dockerfile-内容"><a href="#7-1-准备-Dockerfile-内容" class="headerlink" title="7.1 准备 Dockerfile 内容"></a>7.1 准备 Dockerfile 内容</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">vi Dockerfile</span><br><span class="line"><span class="comment"># 添加内容</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">#声明基础镜像来源</span></span><br><span class="line"><span class="string">FROM apachephp:v1</span></span><br><span class="line"><span class="string">#声明镜像拥有者</span></span><br><span class="line"><span class="string">MAINTAINER DTSTACK</span></span><br><span class="line"><span class="string">#RUN后面接容器运行前需要执行的命令，由于Dockerfile文件不能超过127行，因此当命令较多时建议写到脚本中执行</span></span><br><span class="line"><span class="string">RUN mkdir /dtstact</span></span><br><span class="line"><span class="string">#开机启动命令，此处最后一个命令需要是可在前台持续执行的命令，否则容器后台运行时会因为命令执行完而退出。</span></span><br><span class="line"><span class="string">ENTRYPOINT ping www.aliyun.com</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="7-2-构建镜像"><a href="#7-2-构建镜像" class="headerlink" title="7.2 构建镜像"></a>7.2 构建镜像</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># . 是Dockerfile 文件路径</span></span><br><span class="line">docker build -t webcentos8:v1 .</span><br><span class="line"><span class="comment"># 查看是否创建成功</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>
<h3 id="7-3-运行容器并查看"><a href="#7-3-运行容器并查看" class="headerlink" title="7.3 运行容器并查看"></a>7.3 运行容器并查看</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 后台运行容器</span></span><br><span class="line">docker run -d webcentos8:v1</span><br><span class="line"><span class="comment"># 查看当前运行容器</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="comment"># 查看所有容器，（包括未运行的）</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="comment"># 根据容器id或name 查看对应日志排错</span></span><br><span class="line">docker logs CONTAINER ID/NAME</span><br></pre></td></tr></table></figure>
<h3 id="7-4-制作镜像"><a href="#7-4-制作镜像" class="headerlink" title="7.4 制作镜像"></a>7.4 制作镜像</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># commit参数后添加容器ID和构建新镜像的名称和版本号。</span></span><br><span class="line">docker commit fb2844b6**** dtstackweb:v1</span><br><span class="line"><span class="comment"># 列出本地（已下载的和本地创建的）镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>
<h3 id="7-5-镜像推送至远程仓库"><a href="#7-5-镜像推送至远程仓库" class="headerlink" title="7.5 镜像推送至远程仓库"></a>7.5 镜像推送至远程仓库</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认推送到Docker Hub。</span></span><br><span class="line"><span class="comment"># 需要先登录Docker，为镜像绑定标签，将镜像命名为 `Docker用户名/镜像名:标签`的格式。最终完成推送。</span></span><br><span class="line"><span class="comment"># 执行后输入镜像仓库密码</span></span><br><span class="line">docker login --username=dtstack_plus registry.cn-shanghai.aliyuncs.com</span><br><span class="line">docker tag [ImageId] registry.cn-shanghai.aliyuncs.com/dtstack123/test:[标签]</span><br><span class="line">docker push registry.cn-shanghai.aliyuncs.com/dtstack123/test:[标签]</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 搭建个人博客</title>
    <url>/2021/08/13/Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><strong>Hexo 搭建个人博客</strong></p>
<span id="more"></span>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li><code>Hexo</code> 是一个快速、简洁且高效的博客框架。<code>Hexo</code> 使用 <code>Markdown</code> 或其他渲染引擎解析文章，可利用靓丽的主题生成静态网页。</li>
</ul>
<h2 id="安装并使用"><a href="#安装并使用" class="headerlink" title="安装并使用"></a>安装并使用</h2><ul>
<li>注：安装之前确保已经安装好<code>node.js</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1. 设置npm源（已经设置过，忽略这一步）</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"># 2. 安装hexo-cli</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"># 3. 创建博客项目</span><br><span class="line">hexo init blog(博客项目名)</span><br><span class="line"># 4. 生成第一篇文章</span><br><span class="line">hexo new my_one_blog</span><br><span class="line"># 博客文件目录</span><br><span class="line">&#123;博客项目目录&#125;\blog\source\_posts</span><br><span class="line"># 5. 启动hexo 服务</span><br><span class="line">hexo server</span><br><span class="line"># 本地访问博客网站（http://127.0.0.1:4000）</span><br><span class="line"># 博客打包，生成HTML/CSS/JS文件</span><br><span class="line">hexo generate</span><br><span class="line"># 文件目录: &#123;博客项目目录&#125;\blog\public</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="博客页面操作"><a href="#博客页面操作" class="headerlink" title="博客页面操作"></a>博客页面操作</h2><h3 id="博客主题更换"><a href="#博客主题更换" class="headerlink" title="博客主题更换"></a>博客主题更换</h3><blockquote>
<p>主题地址：<code>https://hexo.io/themes/</code><br>本文选择：<code>https://github.com/theme-next/hexo-theme-next</code></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 第一种：使用git 提交命令，将代码提交到github（不建议推荐）</span><br><span class="line"># 1. 目录切换到博客项目根目录</span><br><span class="line"># 2. github 远程存储库克隆到本地存储库</span><br><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br><span class="line"># 3. 标签版本切换</span><br><span class="line">cd themes/next</span><br><span class="line"># 3.1 查看标签版本</span><br><span class="line">git tag -l</span><br><span class="line"># 3.2 切换分支</span><br><span class="line">git checkout tags/v5.1.0</span><br><span class="line">git checkout master</span><br><span class="line"># 4. 设置使用主题</span><br><span class="line"># 修改项目根目录下的 _config.yml</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 第二种：使用hexo 命令</span><br><span class="line"># 1. 修改博客项目目录下 _config.yml</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/zhang123-123/zhang123-123.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  (分支名与在github page设置一样)</span><br><span class="line"># 2. 执行命令</span><br><span class="line">hexo g -d</span><br><span class="line"># 如果命令执行报错，说明deployer 没有安装成功</span><br><span class="line">  ERROR Deployer not found: git</span><br><span class="line"># 3. 执行安装命令（如果上一条命令执行未报错，忽略这一步）</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"># 4. 重新执行命令</span><br><span class="line">hexo g -d</span><br><span class="line"># 5. 选择主题，目录切换到themes</span><br><span class="line">cd themes</span><br><span class="line"># 6. github 远程存储库克隆到本地存储库</span><br><span class="line">git clone https://github.com/theme-next/hexo-theme-next</span><br><span class="line"># 7. 设置使用主题</span><br><span class="line"># 修改项目根目录下的 _config.yml</span><br><span class="line">theme: hexo-theme-next</span><br><span class="line"># 8. 清除缓存，若不输入此命令，服务器有可能更新不了主题</span><br><span class="line">hexo clean</span><br><span class="line"># 9. 重新执行命令</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<h2 id="Hexo-博客UI-优化（next-主题）"><a href="#Hexo-博客UI-优化（next-主题）" class="headerlink" title="Hexo 博客UI 优化（next 主题）"></a>Hexo 博客UI 优化（next 主题）</h2><h3 id="UI-界面中文化"><a href="#UI-界面中文化" class="headerlink" title="UI 界面中文化"></a>UI 界面中文化</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改项目根目录下的 _config.yml，查看&#123;博客根目录&#125;\themes\hexo-theme-next\language对应文件</span><br><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure>
<h3 id="添加博客统计信息（字数统计-阅读时长）"><a href="#添加博客统计信息（字数统计-阅读时长）" class="headerlink" title="添加博客统计信息（字数统计/阅读时长）"></a>添加博客统计信息（字数统计/阅读时长）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用插件</span><br><span class="line">hexo-wordcount</span><br><span class="line"># 修改配置文件，next主题目录下的 _config.yml</span><br><span class="line"># 统计字数和阅读时长</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true         # 单篇 字数统计</span><br><span class="line">  min2read: true          # 单篇 阅读时长</span><br><span class="line">  totalcount: false       # 网站 字数统计</span><br><span class="line">  separated_meta: true</span><br><span class="line"># 添加页面显示信息</span><br><span class="line"># &#123;博客根目录&#125;\themes\hexo-theme-next\layout\post.swig</span><br><span class="line">&#123;%- if theme.post_wordcount.item_text %&#125;  </span><br><span class="line">  &lt;br&gt;  </span><br><span class="line">  &lt;span class=&quot;post-meta-item&quot; title=&quot;&#123;&#123; __(&#x27;symbols_count_time.count&#x27;) &#125;&#125;&quot;&gt;  </span><br><span class="line">  &lt;span class=&quot;post-meta-item-icon&quot;&gt;  </span><br><span class="line">  &lt;i class=&quot;fa fa-file-word&quot;&gt;&lt;/i&gt;  </span><br><span class="line">  &lt;/span&gt;  </span><br><span class="line"> &lt;span class=&quot;post-meta-item-text&quot;&gt;&#123;&#123; __(&#x27;symbols_count_time.count&#x27;) &#125;&#125;：&lt;/span&gt;  </span><br><span class="line"> &lt;span title=&quot;&#123;&#123; __(&#x27;post.wordcount&#x27;) &#125;&#125;&quot;&gt;  </span><br><span class="line">      &#123;&#123; wordcount(post.content) &#125;&#125; 字  </span><br><span class="line">  &lt;/span&gt;  </span><br><span class="line">  &lt;/span&gt;  </span><br><span class="line">  &lt;span class=&quot;post-meta-item&quot; title=&quot;&#123;&#123; __(&#x27;symbols_count_time.time&#x27;) &#125;&#125;&quot;&gt;  </span><br><span class="line">  &lt;span class=&quot;post-meta-item-icon&quot;&gt;  </span><br><span class="line">  &lt;i class=&quot;fa fa-clock&quot;&gt;&lt;/i&gt;  </span><br><span class="line">  &lt;/span&gt;  </span><br><span class="line">&lt;span class=&quot;post-meta-item-text&quot;&gt;&#123;&#123; __(&#x27;symbols_count_time.time&#x27;) &#125;&#125;：&lt;/span&gt;  </span><br><span class="line"> &lt;span title=&quot;&#123;&#123; __(&#x27;post.min2read&#x27;) &#125;&#125;&quot;&gt;  </span><br><span class="line">      &#123;&#123; min2read(post.content) &#125;&#125; 分钟  </span><br><span class="line">  &lt;/span&gt;  </span><br><span class="line">  &lt;/span&gt;  </span><br><span class="line"> &#123;%- endif%&#125;</span><br></pre></td></tr></table></figure>
<h3 id="添加鼠标点击♥显示"><a href="#添加鼠标点击♥显示" class="headerlink" title="添加鼠标点击♥显示"></a>添加鼠标点击♥显示</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1. 创建js 文件（path: &#123;博客根目录&#125;\themes\hexo-theme-next\source\js\my_js\clicklove.js）</span><br><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br><span class="line"></span><br><span class="line"># 2. 调用js文件（path:  &#123;博客根目录&#125;\themes\hexo-theme-next\layout\_layout.swig）</span><br><span class="line">&lt;!-- 页面点击小红心 --&gt;  </span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/clicklove.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"># 3. 重启服务</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<h3 id="页面背景动态线条配置"><a href="#页面背景动态线条配置" class="headerlink" title="页面背景动态线条配置"></a>页面背景动态线条配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1. 创建js 文件（path: &#123;博客根目录&#125;\themes\hexo-theme-next\source\js\my_js\clicklove.js）</span><br><span class="line">// 背景动态线条js  </span><br><span class="line">!function()&#123;function o(w,v,i)&#123;return w.getAttribute(v)||i&#125;function j(i)&#123;return document.getElementsByTagName(i)&#125;function l()&#123;var i=j(&quot;script&quot;),w=i.length,v=i[w-1];return&#123;l:w,z:o(v,&quot;zIndex&quot;,-1),o:o(v,&quot;opacity&quot;,0.5),c:o(v,&quot;color&quot;,&quot;0,0,0&quot;),n:o(v,&quot;count&quot;,99)&#125;&#125;function k()&#123;r=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,n=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight&#125;function b()&#123;e.clearRect(0,0,r,n);var w=[f].concat(t);var x,v,A,B,z,y;t.forEach(function(i)&#123;i.x+=i.xa,i.y+=i.ya,i.xa*=i.x&gt;r||i.x&lt;0?-1:1,i.ya*=i.y&gt;n||i.y&lt;0?-1:1,e.fillRect(i.x-0.5,i.y-0.5,1,1);for(v=0;v&lt;w.length;v++)&#123;x=w[v];if(i!==x&amp;&amp;null!==x.x&amp;&amp;null!==x.y)&#123;B=i.x-x.x,z=i.y-x.y,y=B*B+z*z;y&lt;x.max&amp;&amp;(x===f&amp;&amp;y&gt;=x.max/2&amp;&amp;(i.x-=0.03*B,i.y-=0.03*z),A=(x.max-y)/x.max,e.beginPath(),e.lineWidth=A/2,e.strokeStyle=&quot;rgba(&quot;+s.c+&quot;,&quot;+(A+0.2)+&quot;)&quot;,e.moveTo(i.x,i.y),e.lineTo(x.x,x.y),e.stroke())&#125;&#125;w.splice(w.indexOf(i),1)&#125;),m(b)&#125;var u=document.createElement(&quot;canvas&quot;),s=l(),c=&quot;c_n&quot;+s.l,e=u.getContext(&quot;2d&quot;),r,n,m=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(i)&#123;window.setTimeout(i,1000/45)&#125;,a=Math.random,f=&#123;x:null,y:null,max:20000&#125;;u.id=c;u.style.cssText=&quot;position:fixed;top:0;left:0;z-index:&quot;+s.z+&quot;;opacity:&quot;+s.o;j(&quot;body&quot;)[0].appendChild(u);k(),window.onresize=k;window.onmousemove=function(i)&#123;i=i||window.event,f.x=i.clientX,f.y=i.clientY&#125;,window.onmouseout=function()&#123;f.x=null,f.y=null&#125;;for(var t=[],p=0;s.n&gt;p;p++)&#123;var h=a()*r,g=a()*n,q=2*a()-1,d=2*a()-1;t.push(&#123;x:h,y:g,xa:q,ya:d,max:6000&#125;)&#125;setTimeout(function()&#123;b()&#125;,100)&#125;();</span><br><span class="line"></span><br><span class="line"># 2. 主题根目录配置_config.yml</span><br><span class="line">canvas_nest: true</span><br><span class="line"># 3. 调用js 文件（注意：代码body标签内部）</span><br><span class="line">&#123;% if theme.canvas_nest %&#125;  </span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; color=&quot;0,0,0&quot; opacity=&#x27;0.5&#x27; zIndex=&quot;-2&quot; count=&quot;200&quot; src=&quot;/js/my_js/canvas-nest.min.js&quot;&gt;&lt;/script&gt;  </span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">-   color：表示线条颜色，三个数字分别为(R,G,B)，默认：（0,0,0）</span><br><span class="line">-   opacity：表示线条透明度（0~1），默认：0.5</span><br><span class="line">-   count：表示线条的总数量，默认：150</span><br><span class="line">-   zIndex：表示背景的z-index属性，css属性用于控制所在层的位置，默认：-1</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>
<h3 id="页面主题动态显示-subtitle"><a href="#页面主题动态显示-subtitle" class="headerlink" title="页面主题动态显示 subtitle"></a>页面主题动态显示 subtitle</h3><ul>
<li><code>path</code>: <code>&#123;hexo根目录&#125;\themes\hexo-theme-next\layout\_partials\header\brand.swig</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- if subtitle %&#125;  </span><br><span class="line">&lt;script src=&quot;https://v1.hitokoto.cn/?c=f&amp;encode=js&amp;select=%23hitokoto&quot; defer&gt;&lt;/script&gt;  </span><br><span class="line">  </span><br><span class="line">  &lt;p class=&quot;site-subtitle&quot; itemprop=&quot;description&quot; id=&quot;hitokoto&quot;&gt;&lt;span id=&quot;hitokoto_text&quot;&gt;&#123;&#123; subtitle &#125;&#125;&lt;/span&gt;&lt;/p&gt;  </span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="hexo-文章添加-图片"><a href="#hexo-文章添加-图片" class="headerlink" title="hexo 文章添加 图片"></a>hexo 文章添加 图片</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1.修改配置文件。&#123;hexo根目录&#125;/_config.yml</span><br><span class="line">post_asset_folder: true (默认是false)</span><br><span class="line"># 2.下载插件</span><br><span class="line">npm install hexo-asset-image --save</span><br><span class="line"># 3.使用</span><br><span class="line"># 第一种：使用hexo 命令创建博客文章</span><br><span class="line">hexo n 博客名</span><br><span class="line"># 默认会在/source/_posts 目录下创建xxx.md和同名的文件夹</span><br><span class="line"># 图片存放在文件夹中</span><br><span class="line"># 在xxx.md 引用图片</span><br><span class="line">![你想输入的替代文字](图片名.jpg)</span><br><span class="line"># 第二种：直接创建xxx.md 和同名的文件夹</span><br><span class="line"># 引用方式与第一种一样。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>NLP 介绍</title>
    <url>/2021/08/13/NLP%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><ul>
<li><code>NLP</code> （自然语言处理）是一种专业分析人类语言的人工智能。</li>
<li>工作原理：<ul>
<li>接收自然语言，这种语言是通过人类的自然使用演变而来的；</li>
<li>转译自然语言，通常是基于概率的算法；</li>
<li>分析自然语言并输出结果。<span id="more"></span>
<h3 id="2-应用实例"><a href="#2-应用实例" class="headerlink" title="2.   应用实例"></a>2.   应用实例</h3></li>
</ul>
</li>
<li>机器翻译</li>
<li>语音识别</li>
<li>聊天机器人</li>
<li>情感分析</li>
<li>电子邮件分类</li>
</ul>
<h3 id="3-NLP-工作流"><a href="#3-NLP-工作流" class="headerlink" title="3. NLP 工作流"></a>3. <code>NLP</code> 工作流</h3><ul>
<li><code>NLP</code> 是一门融合语言学、计算机科学、机器学习的混合学科。<h4 id="3-1-NLP-使用过程主要步骤"><a href="#3-1-NLP-使用过程主要步骤" class="headerlink" title="3.1 NLP 使用过程主要步骤"></a>3.1 <code>NLP</code> 使用过程主要步骤</h4></li>
</ul>
<ol>
<li>文本预处理</li>
<li>文本表示</li>
<li>分析和建模</li>
</ol>
]]></content>
      <categories>
        <category>Nosql</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>neo4j</tag>
      </tags>
  </entry>
  <entry>
    <title>NLTK 模块详解</title>
    <url>/2021/08/13/NLTK%20%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="NLTK-模块详解"><a href="#NLTK-模块详解" class="headerlink" title="NLTK 模块详解"></a>NLTK 模块详解</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><ul>
<li><code>nltk</code> 是一个 <code>python</code> 工具包，用来处理与自然语言相关的东西，包括分词（<code>tokenize</code>）、词性标注（<code>POS</code>）、文本分类等，是较为好用的现成工具。目前支持英文分词，而不支持中文分词。<span id="more"></span>
<h3 id="2-安装模块"><a href="#2-安装模块" class="headerlink" title="2. 安装模块"></a>2. 安装模块</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install nltk</span><br></pre></td></tr></table></figure></li>
<li>注意：<code>nltk</code> 相当于一个总模块，如果需要正常使用，还需要自定义安装内容。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line">nltk.download()</span><br><span class="line"><span class="comment"># showing info https://raw.githubusercontent.com/nltk/nltk_data/gh-pages/index.xml</span></span><br><span class="line"><span class="comment"># 代码运行后，会弹出NLTK Downloader窗口，可以安装使用的模块。</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-基础方法"><a href="#3-基础方法" class="headerlink" title="3. 基础方法"></a>3. 基础方法</h3><h4 id="3-1-文本按照句子进行分割-sent-tokenize"><a href="#3-1-文本按照句子进行分割-sent-tokenize" class="headerlink" title="3.1 文本按照句子进行分割 sent_tokenize()"></a>3.1 文本按照句子进行分割 <code>sent_tokenize()</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-  </span></span><br><span class="line"><span class="keyword">from</span> nltk.tokenize <span class="keyword">import</span> sent_tokenize  </span><br><span class="line">  </span><br><span class="line">input_str = <span class="string">&quot;A wrapper around a sequence of simple (string) tokens. which is intended to support initial exploration of texts (via the interactive console).&quot;</span>  </span><br><span class="line"></span><br><span class="line">tokens = sent_tokenize(input_str)  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tokens), tokens)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;class &#x27;list&#x27;&gt; [&#x27;A wrapper around a sequence of simple (string) tokens.&#x27;, &#x27;which is intended to support initial exploration of texts (via the interactive console).&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-2-对句子进行分词-word-tokenize"><a href="#3-2-对句子进行分词-word-tokenize" class="headerlink" title="3.2 对句子进行分词 word_tokenize()"></a>3.2 对句子进行分词 <code>word_tokenize()</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-  </span></span><br><span class="line"><span class="keyword">from</span> nltk.tokenize <span class="keyword">import</span> word_tokenize</span><br><span class="line">  </span><br><span class="line">input_str = <span class="string">&quot;A wrapper around a sequence of simple (string) tokens. which is intended to support initial exploration of texts (via the interactive console).&quot;</span>  </span><br><span class="line"></span><br><span class="line">tokens = word_tokenize(input_str)  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tokens), tokens)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;class &#x27;list&#x27;&gt; [&#x27;A&#x27;, &#x27;wrapper&#x27;, &#x27;around&#x27;, &#x27;a&#x27;, &#x27;sequence&#x27;, &#x27;of&#x27;, &#x27;simple&#x27;, &#x27;(&#x27;, &#x27;string&#x27;, &#x27;)&#x27;, &#x27;tokens&#x27;, &#x27;.&#x27;, &#x27;which&#x27;, &#x27;is&#x27;, &#x27;intended&#x27;, &#x27;to&#x27;, &#x27;support&#x27;, &#x27;initial&#x27;, &#x27;exploration&#x27;, &#x27;of&#x27;, &#x27;texts&#x27;, &#x27;(&#x27;, &#x27;via&#x27;, &#x27;the&#x27;, &#x27;interactive&#x27;, &#x27;console&#x27;, &#x27;)&#x27;, &#x27;.&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>注意：对文本按照句子，分词是句子级。因此需要先分句，在逐句分词，否则效果较差。</li>
</ul>
<h4 id="3-3-分词词性标注-pos-tag"><a href="#3-3-分词词性标注-pos-tag" class="headerlink" title="3.3 分词词性标注 pos_tag()"></a>3.3 分词词性标注 <code>pos_tag()</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk <span class="keyword">import</span> pos_tag</span><br><span class="line"><span class="keyword">from</span> nltk <span class="keyword">import</span> pos_tag  </span><br><span class="line"><span class="keyword">from</span> nltk.tokenize <span class="keyword">import</span> word_tokenize, sent_tokenize  </span><br><span class="line"><span class="keyword">from</span> nltk.text <span class="keyword">import</span> Text  </span><br><span class="line">  </span><br><span class="line">input_str = <span class="string">&quot;A wrapper around a sequence of simple (string) tokens. which is intended to support initial exploration of texts (via the interactive console).&quot;</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">tokens = sent_tokenize(input_str)  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tokens), tokens)  </span><br><span class="line">  </span><br><span class="line">words = []  </span><br><span class="line"><span class="keyword">for</span> token <span class="keyword">in</span> tokens:  </span><br><span class="line">    words.append([word.lower() <span class="keyword">for</span> word <span class="keyword">in</span> word_tokenize(token)])  </span><br><span class="line"><span class="built_in">print</span>(words)</span><br><span class="line">tags = []  </span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:  </span><br><span class="line">    tags.append(pos_tag(word))  </span><br><span class="line"><span class="built_in">print</span>(tags)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;class &#x27;list&#x27;&gt; [&#x27;A wrapper around a sequence of simple (string) tokens.&#x27;, &#x27;which is intended to support initial exploration of texts (via the interactive console).&#x27;]</span></span><br><span class="line"><span class="string">[[&#x27;a&#x27;, &#x27;wrapper&#x27;, &#x27;around&#x27;, &#x27;a&#x27;, &#x27;sequence&#x27;, &#x27;of&#x27;, &#x27;simple&#x27;, &#x27;(&#x27;, &#x27;string&#x27;, &#x27;)&#x27;, &#x27;tokens&#x27;, &#x27;.&#x27;], [&#x27;which&#x27;, &#x27;is&#x27;, &#x27;intended&#x27;, &#x27;to&#x27;, &#x27;support&#x27;, &#x27;initial&#x27;, &#x27;exploration&#x27;, &#x27;of&#x27;, &#x27;texts&#x27;, &#x27;(&#x27;, &#x27;via&#x27;, &#x27;the&#x27;, &#x27;interactive&#x27;, &#x27;console&#x27;, &#x27;)&#x27;, &#x27;.&#x27;]]</span></span><br><span class="line"><span class="string">[[(&#x27;a&#x27;, &#x27;DT&#x27;), (&#x27;wrapper&#x27;, &#x27;NN&#x27;), (&#x27;around&#x27;, &#x27;IN&#x27;), (&#x27;a&#x27;, &#x27;DT&#x27;), (&#x27;sequence&#x27;, &#x27;NN&#x27;), (&#x27;of&#x27;, &#x27;IN&#x27;), (&#x27;simple&#x27;, &#x27;JJ&#x27;), (&#x27;(&#x27;, &#x27;(&#x27;), (&#x27;string&#x27;, &#x27;VBG&#x27;), (&#x27;)&#x27;, &#x27;)&#x27;), (&#x27;tokens&#x27;, &#x27;NNS&#x27;), (&#x27;.&#x27;, &#x27;.&#x27;)], [(&#x27;which&#x27;, &#x27;WDT&#x27;), (&#x27;is&#x27;, &#x27;VBZ&#x27;), (&#x27;intended&#x27;, &#x27;VBN&#x27;), (&#x27;to&#x27;, &#x27;TO&#x27;), (&#x27;support&#x27;, &#x27;VB&#x27;), (&#x27;initial&#x27;, &#x27;JJ&#x27;), (&#x27;exploration&#x27;, &#x27;NN&#x27;), (&#x27;of&#x27;, &#x27;IN&#x27;), (&#x27;texts&#x27;, &#x27;NN&#x27;), (&#x27;(&#x27;, &#x27;(&#x27;), (&#x27;via&#x27;, &#x27;IN&#x27;), (&#x27;the&#x27;, &#x27;DT&#x27;), (&#x27;interactive&#x27;, &#x27;JJ&#x27;), (&#x27;console&#x27;, &#x27;NN&#x27;), (&#x27;)&#x27;, &#x27;)&#x27;), (&#x27;.&#x27;, &#x27;.&#x27;)]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>


<h3 id="4-Text-对象属性，方法"><a href="#4-Text-对象属性，方法" class="headerlink" title="4. Text 对象属性，方法"></a>4. Text 对象属性，方法</h3><h4 id="4-1-count"><a href="#4-1-count" class="headerlink" title="4.1 count()"></a>4.1 <code>count()</code></h4><ul>
<li>统计对象中某个词出现的次数<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.text <span class="keyword">import</span> Text</span><br><span class="line">t = Text(words[<span class="number">0</span>])  </span><br><span class="line">t.count(<span class="string">&quot;a&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-2-index"><a href="#4-2-index" class="headerlink" title="4.2 index()"></a>4.2 <code>index()</code></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.text <span class="keyword">import</span> Text</span><br><span class="line">t = Text(words[<span class="number">0</span>])  </span><br><span class="line">t.index(<span class="string">&quot;a&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="4-3-plot-以图表形式显示前几个最多的次数"><a href="#4-3-plot-以图表形式显示前几个最多的次数" class="headerlink" title="4.3 plot() 以图表形式显示前几个最多的次数"></a>4.3 <code>plot()</code> 以图表形式显示前几个最多的次数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> nltk.text <span class="keyword">import</span> Text</span><br><span class="line">t = Text(words[<span class="number">0</span>])</span><br><span class="line">t.plot(<span class="number">3</span>)  </span><br></pre></td></tr></table></figure>

<h3 id="5-停用词过滤"><a href="#5-停用词过滤" class="headerlink" title="5. 停用词过滤"></a>5. 停用词过滤</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> nltk.corpus <span class="keyword">import</span> stopwords  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 停用词说明介绍  </span></span><br><span class="line"><span class="built_in">print</span>(stopwords.readme().replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot; &quot;</span>))  </span><br><span class="line"><span class="comment"># 展示停用词表的个数  </span></span><br><span class="line"><span class="built_in">print</span>(stopwords.fileids())  </span><br><span class="line"><span class="comment"># 查看某个停用词表中的词  </span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(stopwords.raw(<span class="string">&quot;finnish&quot;</span>)), stopwords.raw(<span class="string">&quot;finnish&quot;</span>).replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;/&quot;</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Stopwords Corpus  This corpus contains lists of stop words for several languages.  These are high-frequency grammatical words which are usually ignored in text retrieval applications.  They were obtained from: http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/src/backend/snowball/stopwords/  The stop words for the Romanian language were obtained from: http://arlc.ro/resources/  The English list has been augmented https://github.com/nltk/nltk_data/issues/22  The German list has been corrected https://github.com/nltk/nltk_data/pull/49  A Kazakh list has been added https://github.com/nltk/nltk_data/pull/52  A Nepali list has been added https://github.com/nltk/nltk_data/pull/83  An Azerbaijani list has been added https://github.com/nltk/nltk_data/pull/100  A Greek list has been added https://github.com/nltk/nltk_data/pull/103  An Indonesian list has been added https://github.com/nltk/nltk_data/pull/112 </span></span><br><span class="line"><span class="string">[&#x27;arabic&#x27;, &#x27;azerbaijani&#x27;, &#x27;danish&#x27;, &#x27;dutch&#x27;, &#x27;english&#x27;, &#x27;finnish&#x27;, &#x27;french&#x27;, &#x27;german&#x27;, &#x27;greek&#x27;, &#x27;hungarian&#x27;, &#x27;indonesian&#x27;, &#x27;italian&#x27;, &#x27;kazakh&#x27;, &#x27;nepali&#x27;, &#x27;norwegian&#x27;, &#x27;portuguese&#x27;, &#x27;romanian&#x27;, &#x27;russian&#x27;, &#x27;slovene&#x27;, &#x27;spanish&#x27;, &#x27;swedish&#x27;, &#x27;tajik&#x27;, &#x27;turkish&#x27;]</span></span><br><span class="line"><span class="string">&lt;class &#x27;str&#x27;&gt; olla/olen/olet/on/olemme/olette/ovat/ole/oli/olisi/olisit/olisin/olisimme/olisitte/olisivat/olit/olin/olimme/olitte/olivat/ollut/olleet/en/et/ei/emme/ette/eivät/minä/minun/minut/minua/minussa/minusta/minuun/minulla/minulta/minulle/sinä/sinun/sinut/sinua/sinussa/sinusta/sinuun/sinulla/sinulta/sinulle/hän/hänen/hänet/häntä/hänessä/hänestä/häneen/hänellä/häneltä/hänelle/me/meidän/meidät/meitä/meissä/meistä/meihin/meillä/meiltä/meille/te/teidän/teidät/teitä/teissä/teistä/teihin/teillä/teiltä/teille/he/heidän/heidät/heitä/heissä/heistä/heihin/heillä/heiltä/heille/tämä/tämän/tätä/tässä/tästä/tähän/tallä/tältä/tälle/tänä/täksi/tuo/tuon/tuotä/tuossa/tuosta/tuohon/tuolla/tuolta/tuolle/tuona/tuoksi/se/sen/sitä/siinä/siitä/siihen/sillä/siltä/sille/sinä/siksi/nämä/näiden/näitä/näissä/näistä/näihin/näillä/näiltä/näille/näinä/näiksi/nuo/noiden/noita/noissa/noista/noihin/noilla/noilta/noille/noina/noiksi/ne/niiden/niitä/niissä/niistä/niihin/niillä/niiltä/niille/niinä/niiksi/kuka/kenen/kenet/ketä/kenessä/kenestä/keneen/kenellä/keneltä/kenelle/kenenä/keneksi/ketkä/keiden/ketkä/keitä/keissä/keistä/keihin/keillä/keiltä/keille/keinä/keiksi/mikä/minkä/minkä/mitä/missä/mistä/mihin/millä/miltä/mille/minä/miksi/mitkä/joka/jonka/jota/jossa/josta/johon/jolla/jolta/jolle/jona/joksi/jotka/joiden/joita/joissa/joista/joihin/joilla/joilta/joille/joina/joiksi/että/ja/jos/koska/kuin/mutta/niin/sekä/sillä/tai/vaan/vai/vaikka/kanssa/mukaan/noin/poikki/yli/kun/niin/nyt/itse/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>NLTK</tag>
      </tags>
  </entry>
  <entry>
    <title>NPM 包管理器详解</title>
    <url>/2021/08/13/NPM%20%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="NPM-包管理器详解"><a href="#NPM-包管理器详解" class="headerlink" title="NPM 包管理器详解"></a><code>NPM</code> 包管理器详解</h2><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><ul>
<li><code>npm</code>（<code>Node Package Manager</code>），<code>node</code>包管理器。</li>
<li>是<code>Node.js</code>默认的，以<code>JavaScript</code>编写的软件包管理系统。</li>
<li>官网：<code>https://www.npmjs.com</code><span id="more"></span>
<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3></li>
<li>官网下载<code>node.js</code>安装包：<code>http://nodejs.cn/</code></li>
<li>直接安装，默认会安装<code>node.js</code>，<code>npm</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看安装版本</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line"># 注：如果正常显示安装版本号，则说明安装成功。</span><br></pre></td></tr></table></figure>
<h3 id="3-npm镜像切换"><a href="#3-npm镜像切换" class="headerlink" title="3. npm镜像切换"></a>3. <code>npm</code>镜像切换</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看npm 源</span><br><span class="line">npm config get registry</span><br><span class="line"># npm config get disturl</span><br><span class="line"># 设置npm为淘宝镜像</span><br><span class="line">1) 第一种</span><br><span class="line">npm config set registry https://registry.npm.taobao.org --global</span><br><span class="line">npm config set disturl https://npm.taobao.org/dist --global</span><br><span class="line"># --global 表示设置为全局镜像</span><br><span class="line">2) 第二种，使用nrm 工具设置淘宝镜像</span><br><span class="line">npx nrm use taobao</span><br><span class="line"># 需要切换官方源命令</span><br><span class="line">npx nrm use npm</span><br><span class="line"></span><br><span class="line"># 可以使用淘宝定制的cnpm(gzip 压缩支持)命令行工具代替默认的npm</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<h3 id="4-基本命令"><a href="#4-基本命令" class="headerlink" title="4. 基本命令"></a>4. 基本命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看版本，npm是否安装成功</span><br><span class="line">npm -v</span><br><span class="line"># 安装模块(默认安装最新版本)</span><br><span class="line">npm install 模块名</span><br><span class="line"># 全局安装模块</span><br><span class="line">npm install 模块名 -g</span><br><span class="line"># 查看所有全局安装的模块</span><br><span class="line">npm list -g</span><br><span class="line"># 查看某个模块的版本号</span><br><span class="line">npm list 模块名</span><br><span class="line"># 安装或更新指定模块到特定版本号</span><br><span class="line">npm -g install 模块名@版本号</span><br><span class="line"># 更新版本到最新版本</span><br><span class="line">npm update 模块名</span><br><span class="line"># 删除模块</span><br><span class="line">npm uninstall 模块名</span><br><span class="line"># -save 在 package 文件的dependencies 节点写入依赖</span><br><span class="line">npm install -save 模块名</span><br><span class="line"># -save-dev 在 package 文件的 devDependencies 节点写入依赖。</span><br><span class="line"># dependencies: 运行时的依赖，发布后，即生产环境下还需要用的模块</span><br><span class="line">npm install -save-dev 模块名</span><br><span class="line"># devDependencies: 开发时的依赖。里面的模块是开发时用的，发布时用不到，如：gulp、压缩css、js模块，这部分模块在项目部署后是不需要的。</span><br></pre></td></tr></table></figure>
<h3 id="5-package-json-属性说明"><a href="#5-package-json-属性说明" class="headerlink" title="5. package.json 属性说明"></a>5. <code>package.json</code> 属性说明</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name -- 包名</span><br><span class="line">version -- 包的版本号</span><br><span class="line"># 版本号说明</span><br><span class="line">5.0.3  表示安装指定5.0.3 版本</span><br><span class="line">~5.0.3 表示安装5.0.x中最新的版本</span><br><span class="line">^5.0.3 表示安装5.x.x中最新的版本</span><br><span class="line">description -- 包的描述</span><br><span class="line">homepage -- 包的官网 url</span><br><span class="line">author -- 包的作者</span><br><span class="line">contributors -- 包的其他贡献者姓名</span><br><span class="line">dependencies -- 依赖包列表。如果依赖包没有安装，npm会自动将依赖的包安装在 node_module 目录上</span><br><span class="line">main -- 指定程序的主入口文件，require(&quot;moduleName&quot;)就会加载这个文件。这个字段的默认值是模块根目录下面的index.js</span><br><span class="line">keywords -- 关键字</span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">  &quot;name&quot;: &quot;test&quot;,  </span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,  </span><br><span class="line">  &quot;description&quot;: &quot;test--&gt;package&quot;,  </span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,  </span><br><span class="line">  &quot;scripts&quot;: &#123;  </span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;  &#125;,  </span><br><span class="line">  &quot;keywords&quot;: [  </span><br><span class="line">    &quot;test&quot;  </span><br><span class="line">  ],  </span><br><span class="line">  &quot;author&quot;: &quot;xiaopang&quot;,  </span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-npm-安装包的使用"><a href="#6-npm-安装包的使用" class="headerlink" title="6. npm 安装包的使用"></a>6. npm 安装包的使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 第一种，使用搜索定位包的路径手动添加到使用的文件中</span><br><span class="line"># 如：使用jquery包</span><br><span class="line">&lt;script src=&quot;./node_modules/jquery/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"># 第二种，使用webpack</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>NPM</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Neo4j 安装</title>
    <url>/2021/08/13/Neo4j%20%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="1-windows-安装"><a href="#1-windows-安装" class="headerlink" title="1. windows 安装"></a>1. <code>windows</code> 安装</h3><h4 id="1-1-安装-java-JDK"><a href="#1-1-安装-java-JDK" class="headerlink" title="1.1 安装 java JDK"></a>1.1 安装 <code>java JDK</code></h4><ul>
<li><code>neo4j</code> 用java语言编写的图形数据库，运行时需要启动<code>JVM</code>进程，安装后在<code>cmd</code> 输入<code>java -version</code> 检查是否安装好。<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html"><code>JAVA JDK</code></a> </li>
<li>如果已安装，忽略这一步。</li>
<li>注意安装<code>JDK</code> 版本不要太高，否则程序不兼容，导致<code>neo4j</code>启动失败。安装版本<code>JDK11</code>。<span id="more"></span>
<h4 id="1-2-下载安装Neo4j"><a href="#1-2-下载安装Neo4j" class="headerlink" title="1.2 下载安装Neo4j"></a>1.2 下载安装<code>Neo4j</code></h4></li>
<li><code>Neo4j</code> 应用程序主要目录：<ul>
<li><code>bin</code>目录：用于存储<code>Neo4j</code>的可执行程序；</li>
<li><code>conf</code>目录：用于控制<code>Neo4j</code>启动的配置文件；</li>
<li><code>data</code>目录：用于存储核心数据库文件；</li>
<li><code>plugins</code>目录：用于存储<code>Neo4j</code>的插件.</li>
</ul>
</li>
</ul>
<h4 id="1-3-添加环境变量"><a href="#1-3-添加环境变量" class="headerlink" title="1.3 添加环境变量"></a>1.3 添加环境变量</h4><h4 id="1-4-Neo4j-启动和停止"><a href="#1-4-Neo4j-启动和停止" class="headerlink" title="1.4 Neo4j 启动和停止"></a>1.4 <code>Neo4j</code> 启动和停止</h4><ul>
<li>注意：在管理员下运行中断</li>
</ul>
<p>1）控制台启动</p>
<ul>
<li><code>neo4j.bat console</code></li>
</ul>
<p>2）安装<code>neo4j</code> 服务<br>2.1）安装和卸载服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">neo4j.bat install-service</span><br><span class="line">neo4j.bat uninstall-service</span><br></pre></td></tr></table></figure>
<p>2.2）启动，停止，重启，查看服务状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">neo4j.bat start</span><br><span class="line">neo4j.bat stop</span><br><span class="line">neo4j.bat restart</span><br><span class="line">neo4j.bat status</span><br></pre></td></tr></table></figure>
<h3 id="2-linux-安装"><a href="#2-linux-安装" class="headerlink" title="2. linux 安装"></a>2. <code>linux</code> 安装</h3><h4 id="2-1-安装-jdk"><a href="#2-1-安装-jdk" class="headerlink" title="2.1 安装 jdk"></a>2.1 安装 <code>jdk</code></h4><ul>
<li>搜索查询要安装的<code>jdk</code><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum search jdk</span><br><span class="line"># 安装：java-11-openjdk.x86_64</span><br><span class="line">yum install java-11-openjdk.x86_64</span><br><span class="line"># 检查是否安装成功</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>
<h4 id="2-2-添加-yum-源"><a href="#2-2-添加-yum-源" class="headerlink" title="2.2  添加 yum 源"></a>2.2  添加 <code>yum</code> 源</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/yum.repos.d/neo4j.repo </span><br><span class="line"></span><br><span class="line">[neo4j]  </span><br><span class="line">name=Neo4j Yum Repo</span><br><span class="line">baseurl=http://yum.neo4j.org/stable</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-3-安装-neo4j"><a href="#2-3-安装-neo4j" class="headerlink" title="2.3 安装 neo4j"></a>2.3 安装 <code>neo4j</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install neo4j</span><br></pre></td></tr></table></figure>

<h4 id="2-4-修改最大打开文件限制"><a href="#2-4-修改最大打开文件限制" class="headerlink" title="2.4 修改最大打开文件限制"></a>2.4 修改最大打开文件限制</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/security/limits.conf </span><br><span class="line"></span><br><span class="line">* soft nofile 65535 </span><br><span class="line">* hard nofile 65535</span><br></pre></td></tr></table></figure>

<h4 id="2-5-修改监听地址"><a href="#2-5-修改监听地址" class="headerlink" title="2.5 修改监听地址"></a>2.5 修改监听地址</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/neo4j/neo4j.conf</span><br><span class="line"></span><br><span class="line"># dbms.connectors.default_listen_address=0.0.0.0</span><br><span class="line"># 取消注释</span><br></pre></td></tr></table></figure>

<h4 id="2-5-开放防火墙端口"><a href="#2-5-开放防火墙端口" class="headerlink" title="2.5 开放防火墙端口"></a>2.5 开放防火墙端口</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 注意：需要开启7474、7687端口</span><br><span class="line">[root@localhost ~]# firewall-cmd --permanent --add-port=7474/tcp</span><br><span class="line">success</span><br><span class="line">[root@localhost ~]# firewall-cmd --permanent --add-port=7687/tcp</span><br><span class="line">success</span><br><span class="line">[root@localhost ~]# firewall-cmd --reload</span><br><span class="line">success</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：第一次访问：<code>http://IP:7474/</code> 会跳到登录验证界面，默认用户名、密码为<code>neo4j</code>，之后登录成功，会跳到修改密码界面。</li>
</ul>
<h4 id="2-6-备份-恢复（社区版）"><a href="#2-6-备份-恢复（社区版）" class="headerlink" title="2.6 备份/恢复（社区版）"></a>2.6 备份/恢复（社区版）</h4><ul>
<li>注意：社区版不支持热备，需要停机备份。</li>
<li>备份：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">neo4j stop</span><br><span class="line">neo4j-admin dump --database=graph.db --to=/data/backup/neo4j/graphdb`date +&quot;%Y&quot;`-`date +&quot;%m&quot;`-`date +&quot;%d&quot;`</span><br><span class="line">neo4j start</span><br></pre></td></tr></table></figure></li>
<li>还原：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">neo4j-admin load --from=graphdb2017-11-17 --database=graph.db</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-7-备份（企业版）"><a href="#2-7-备份（企业版）" class="headerlink" title="2.7 备份（企业版）"></a>2.7 备份（企业版）</h4><ul>
<li>支持热备<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$neo4j-home&gt; mkdir /mnt/backup</span><br><span class="line">$neo4j-home&gt; bin/neo4j-admin backup --from=192.168.1.34 --backup-dir=/mnt/backup --name=graph.db-backup</span><br><span class="line">Doing full backup...</span><br><span class="line">2017-02-01 14:09:09.510+0000 INFO  [o.n.c.s.StoreCopyClient] Copying neostore.nodestore.db.labels</span><br><span class="line">2017-02-01 14:09:09.537+0000 INFO  [o.n.c.s.StoreCopyClient] Copied neostore.nodestore.db.labels 8.00 kB</span><br><span class="line">2017-02-01 14:09:09.538+0000 INFO  [o.n.c.s.StoreCopyClient] Copying neostore.nodestore.db</span><br><span class="line">2017-02-01 14:09:09.540+0000 INFO  [o.n.c.s.StoreCopyClient] Copied neostore.nodestore.db 16.00 kB</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Nosql</category>
      </categories>
      <tags>
        <tag>neo4j</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 主动抛出异常、自定义异常</title>
    <url>/2021/08/13/Python%20%E4%B8%BB%E5%8A%A8%E6%8A%9B%E5%87%BA%E5%BC%82%E5%B8%B8%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h2 id="Python-主动抛出异常、自定义异常"><a href="#Python-主动抛出异常、自定义异常" class="headerlink" title="Python 主动抛出异常、自定义异常"></a>Python 主动抛出异常、自定义异常</h2><h3 id="1-抛出异常"><a href="#1-抛出异常" class="headerlink" title="1. 抛出异常"></a>1. 抛出异常</h3><h4 id="1-1-raise"><a href="#1-1-raise" class="headerlink" title="1.1 raise"></a>1.1 raise</h4><ul>
<li><code>raise</code> 指定要抛出的异常。</li>
<li>对应参数必须是异常的实例或是异常的类（<code>Exception</code>）<span id="more"></span>
例：<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">x</span>):</span>  </span><br><span class="line">    <span class="keyword">if</span> x &gt; <span class="number">5</span>:  </span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">f&quot;x 不能大于 5，x=<span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">  File &quot;&lt;stdin&gt;&quot;, line 3, in fun</span></span><br><span class="line"><span class="string">Exception: x 不能大于 5，x=7</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="1-2-assert"><a href="#1-2-assert" class="headerlink" title="1.2 assert"></a>1.2 assert</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assert condition</span><br><span class="line"># condition 为真，不做任何事情</span><br><span class="line"># condition 为假，抛出AssertionError异常</span><br><span class="line"># 等价于：</span><br><span class="line">if not condition:  </span><br><span class="line">    raise AssertionError()</span><br></pre></td></tr></table></figure>
<h3 id="2-自定义异常"><a href="#2-自定义异常" class="headerlink" title="2. 自定义异常"></a>2. 自定义异常</h3></li>
<li>自定义类异常必须继承 <code>Exception</code></li>
</ul>
<p>自定义异常：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQLError</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, error_info</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MySQLError, self).__init__(error_info)</span><br><span class="line">        self.error_info = error_info</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.error_inf</span><br></pre></td></tr></table></figure>
<p>使用自定义异常：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> MySQLError(<span class="string">&#x27;异常&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> MySQLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>raise</tag>
      </tags>
  </entry>
  <entry>
    <title>WebPack 介绍</title>
    <url>/2021/08/13/WebPack%20%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="WebPack-介绍"><a href="#WebPack-介绍" class="headerlink" title="WebPack 介绍"></a><code>WebPack</code> 介绍</h2><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><ul>
<li><code>WebPack</code> 是一个前端资源加载、打包工具。根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。<span id="more"></span>
<h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3></li>
<li>前提条件：本地环境需要支持<code>node.js</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1. 创建项目目录--&gt;(webpack_demo)可以是任意；</span><br><span class="line"># 2. 使用Webstorm 打开项目目录，进入命令行界面</span><br><span class="line">npm init -y</span><br><span class="line"># 3. 安装webpack及webpack-cli</span><br><span class="line">npm install webpack webpack-cli --D</span><br><span class="line"># 4. 创建src 目录或根据需要创建其他子目录</span><br><span class="line"># 5. 在src下创建一些js文件和一个主入口文件index.js</span><br><span class="line"># 6. 控制台运行命令</span><br><span class="line">开发环境：webpack --mode=development</span><br><span class="line">生产环境：webpack --mode=production</span><br><span class="line"># 7. 可以使用node运行打包资源，也可使用HTML引入打包资源</span><br></pre></td></tr></table></figure>

<h3 id="3-webpack-config-js-文件配置"><a href="#3-webpack-config-js-文件配置" class="headerlink" title="3. webpack.config.js 文件配置"></a>3. webpack.config.js 文件配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. entry</span><br><span class="line"># 入口（entry）指 webpack 以哪个文件作为起点开始打包，分析构建内部依赖图。默认是src/index.js</span><br><span class="line">2. output</span><br><span class="line"># 输出（output）指 webpack打包后的资源 bundles 输出到哪里，以及如何命名。默认是dist/main.js</span><br><span class="line">3. loader</span><br><span class="line"># loader 让 webpack 能够处理那些非 JavaScript、css、img等。将他们处理成webpack 能够识别的资源，可以理解为一个翻译过程。（默认webpack自身只能理解js和json）</span><br><span class="line">4. plugins</span><br><span class="line"># 插件（plugins）可用于执行范围更广的任务。插件范围包括，从打包和压缩，一直到重新定义环境中的变量</span><br><span class="line">5. mode</span><br><span class="line"># 模式（mode）指示webpack 使用相应模式的配置。</span><br><span class="line"># 开发模式（development）: 配置比较简单，创建代码本地调试运行的环境</span><br><span class="line"># 生产模式（production）: 代码需要不断优化达到性能最好，生成代码上线运行的环境</span><br><span class="line"># 注: 都会自动启用一些插件，生产模式使用插件更多。</span><br></pre></td></tr></table></figure>
<h4 id="3-1-使用"><a href="#3-1-使用" class="headerlink" title="3.1 使用"></a>3.1 使用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;resolve&#125; = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 生产模式：production，开发模式：development</span></span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">    <span class="comment">/* 举例：</span></span><br><span class="line"><span class="comment">    * 1. 单入口。str，打包成一个chunk，输出一个bundle 文件，chunk的名称默认</span></span><br><span class="line"><span class="comment">    entry: &quot;./src/index.js&quot;</span></span><br><span class="line"><span class="comment">    * 2. 多入口。list，所有入口文件形成一个chunk(名称默认)</span></span><br><span class="line"><span class="comment">    entry: [&quot;./src/one.js&quot;, &quot;./src/two.js&quot;]</span></span><br><span class="line"><span class="comment">    * 3. 多入口。obj，几个入口就有几个chunk，并输出几个bundle 文件，chunk的名称是key.js</span></span><br><span class="line"><span class="comment">    entry: &#123;</span></span><br><span class="line"><span class="comment">        one: &quot;./src/one.js&quot;,</span></span><br><span class="line"><span class="comment">        two: &quot;./src/two.js&quot;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    * 4. 特殊用法。之前模式混合</span></span><br><span class="line"><span class="comment">    entry: &#123;</span></span><br><span class="line"><span class="comment">        * 数组中所有入口文件生成一个chunk，输出bundle文件，名称是key</span></span><br><span class="line"><span class="comment">        one_two: [&quot;./src/one.js&quot;, &quot;./src/two.js&quot;]</span></span><br><span class="line"><span class="comment">        * 形成一个chunk，输出一个bundle文件</span></span><br><span class="line"><span class="comment">        index: &quot;./src/index.js&quot;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;build.js&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>: resolve(__dirname, <span class="string">&quot;build&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line"></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-webPack打包html-资源，压缩html代码"><a href="#4-webPack打包html-资源，压缩html代码" class="headerlink" title="4. webPack打包html 资源，压缩html代码"></a>4. webPack打包html 资源，压缩html代码</h3><h4 id="4-1-打包单个html-文件"><a href="#4-1-打包单个html-文件" class="headerlink" title="4.1 打包单个html 文件"></a>4.1 打包单个html 文件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用插件（html-webpack-plugin）对html文件进行处理</span></span><br><span class="line"><span class="comment">// 1. 下载</span></span><br><span class="line">npm i html-webpack-plugin -D</span><br><span class="line"><span class="comment">// i --&gt; 安装</span></span><br><span class="line"><span class="comment">// -D --&gt; 表示开发环境运行</span></span><br><span class="line"><span class="comment">// 2. 引用插件</span></span><br><span class="line"><span class="comment">// 在webpack.config.js 中引用。</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="comment">// 3. 使用插件</span></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">	<span class="comment">//1. 默认创建空的HTML文件，自动引入打包资源（js/css）</span></span><br><span class="line">	<span class="comment">// new HtmlWebpackPlugin()</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 通过参数可以输出有结构的HTML资源</span></span><br><span class="line">	<span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">		<span class="comment">// 复制 &quot;./src/index.html&quot;，并自动引入打包输出的所有资源（js/css）</span></span><br><span class="line">		<span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span>,</span><br><span class="line">		<span class="comment">// 默认输出index.html，设置filename设置输出文件名称</span></span><br><span class="line">		<span class="attr">filename</span>: <span class="string">&quot;demo.html&quot;</span>,</span><br><span class="line">		<span class="comment">// 压缩html 代码</span></span><br><span class="line">		<span class="attr">minify</span>: &#123;</span><br><span class="line">			<span class="comment">// 移除空格</span></span><br><span class="line">			<span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">			<span class="comment">// 移除注释</span></span><br><span class="line">			<span class="attr">removeComments</span>: <span class="literal">true</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h4 id="4-2-打包多个html-文件"><a href="#4-2-打包多个html-文件" class="headerlink" title="4.2 打包多个html 文件"></a>4.2 打包多个html 文件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 多个entry</span></span><br><span class="line"><span class="attr">entry</span>: &#123;</span><br><span class="line">	<span class="attr">verdor</span>: [<span class="string">&quot;jquery&quot;</span>, <span class="string">&quot;./src/js/common.js&quot;</span>],</span><br><span class="line">	<span class="attr">index</span>: <span class="string">&quot;./src/js/index.js&quot;</span>,</span><br><span class="line">	<span class="attr">cart</span>: <span class="string">&quot;./src/js/cart.js&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 负责打包html文件，将js注入html，minify 压缩 html</span></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">	<span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">		<span class="attr">filename</span>: <span class="string">&quot;index.html&quot;</span>,</span><br><span class="line">		<span class="attr">template</span>: <span class="string">&quot;./src/index.html&quot;</span>,</span><br><span class="line">		<span class="comment">// chunks 对应html文件，所需的资源。默认全部资源导入</span></span><br><span class="line">		<span class="attr">chunks</span>: [<span class="string">&quot;index&quot;</span>, <span class="string">&quot;vendor&quot;</span>],</span><br><span class="line">		<span class="attr">minify</span>: &#123;</span><br><span class="line">			<span class="attr">removeComment</span>: <span class="literal">true</span>,</span><br><span class="line">			<span class="attr">collapseWhitespace</span>: <span class="literal">true</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;),</span><br><span class="line">	<span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">		<span class="attr">filename</span>: <span class="string">&quot;cart.html&quot;</span>,</span><br><span class="line">		<span class="attr">template</span>: <span class="string">&quot;./src/cart.html&quot;</span>,</span><br><span class="line">		<span class="attr">chunks</span>: [<span class="string">&quot;cart&quot;</span>, <span class="string">&quot;vendor&quot;</span>]</span><br><span class="line">	&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="5-webpack-打包-css-资源"><a href="#5-webpack-打包-css-资源" class="headerlink" title="5. webpack 打包 css 资源"></a>5. webpack 打包 css 资源</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 安装插件（css-loader/style-loader）</span></span><br><span class="line">npm i css-loader style-loader -D</span><br><span class="line"><span class="comment">// css-loader: 处理css中的@import 和 url 这样的外部资源</span></span><br><span class="line"><span class="comment">// style-loader: 把样式插入到DOM 中，方法是在head 中插入一个style 标签，并把样式写入到这个标签的innerHTML</span></span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">			<span class="comment">// 一个规则</span></span><br><span class="line">			<span class="comment">// loader: &quot;css-styl&quot;</span></span><br><span class="line">			<span class="comment">// 多个规则</span></span><br><span class="line">			use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">		&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WebPack</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>mongoDB 使用</title>
    <url>/2021/08/13/mongoDB%20%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>@[toc]</p>
<h1 id="mongoDB"><a href="#mongoDB" class="headerlink" title="mongoDB"></a>mongoDB</h1><h2 id="1-databases-基础命令"><a href="#1-databases-基础命令" class="headerlink" title="1. databases 基础命令"></a>1. databases 基础命令</h2><h3 id="1-1-数据库基本操作"><a href="#1-1-数据库基本操作" class="headerlink" title="1.1 数据库基本操作"></a>1.1 数据库基本操作</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查看当前数据库：</span><br><span class="line">db</span><br><span class="line"># 查看所有数据库：</span><br><span class="line"><span class="keyword">show</span> dbs<span class="operator">/</span><span class="keyword">show</span> databases</span><br><span class="line"># 切换数据库：</span><br><span class="line">use db_name</span><br><span class="line"># 删除当前数据库：</span><br><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="1-2-集合操作"><a href="#1-2-集合操作" class="headerlink" title="1.2 集合操作"></a>1.2 集合操作</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 手动创建集合：</span><br><span class="line">db.createCollection(name,options)</span><br><span class="line">db.createCollection(&quot;stu&quot;)</span><br><span class="line">db.createCollection(&quot;sub&quot;, &#123;capped: <span class="literal">true</span>, size: <span class="number">10</span>&#125;)</span><br><span class="line"># 参数capped：默认值为<span class="literal">false</span>表示不设置上限，值为<span class="literal">true</span>表示设置上限</span><br><span class="line"># 参数size：当capped 值为<span class="literal">true</span>时，需要指定此参数，表示上限大小，当文件达到上限是，会将之前的数据覆盖</span><br><span class="line"># 查看集合：</span><br><span class="line"><span class="keyword">show</span> collections</span><br><span class="line"># 删除集合：</span><br><span class="line">db.collection_name.drop()</span><br></pre></td></tr></table></figure>
<ul>
<li>创建日期语句：<code>new Date(&quot;2021-07-07&quot;)</code></li>
<li>参数格式：<code>YYYY-MM-DD</code></li>
</ul>
<h3 id="1-3-添加数据"><a href="#1-3-添加数据" class="headerlink" title="1.3 添加数据"></a>1.3 添加数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 字段插入：</span><br><span class="line">db.collection_name.insert(&#123;&quot;name&quot;: &quot;zhangsan&quot;, &quot;age&quot;: <span class="number">18</span>&#125;)</span><br><span class="line">db.collection_name.save(&#123;&quot;name&quot;: &quot;zhangsan&quot;, &quot;age&quot;: <span class="number">18</span>&#125;)</span><br><span class="line"># 两个区别，<span class="keyword">insert</span>如果插入数据_id已存在，则报错。</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">WriteResult(&#123;</span></span><br><span class="line"><span class="comment">        &quot;nInserted&quot; : 0,</span></span><br><span class="line"><span class="comment">        &quot;writeError&quot; : &#123;</span></span><br><span class="line"><span class="comment">                &quot;code&quot; : 11000,</span></span><br><span class="line"><span class="comment">                &quot;errmsg&quot; : &quot;E11000 duplicate key error collection: test1.test1 index: _id_ dup key: &#123; : \&quot;101\&quot; &#125;&quot;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"># save如果插入数据_id已存在，则覆盖原来数据</span><br></pre></td></tr></table></figure>

<h3 id="1-4-数据查询"><a href="#1-4-数据查询" class="headerlink" title="1.4 数据查询"></a>1.4 数据查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.collection_name.find() 会查询集合下的所有元素</span><br><span class="line"></span><br><span class="line">db.collection_name.find(&#123;条件文档&#125;)</span><br><span class="line">db.collection_name.findOne(&#123;条件文档&#125;) 查询只返回一个</span><br><span class="line">db.collection_name.find(&#123;条件文档&#125;).pretty()</span><br><span class="line"></span><br><span class="line"><span class="operator">&gt;</span> db.test1.find(&#123;&quot;name&quot;: &quot;zhangsan1&quot;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60e56aa72b2a0b777e5a1102&quot;), &quot;name&quot; : &quot;zhangsan1&quot;, &quot;age&quot; : <span class="number">20</span> &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;101&quot;, &quot;name&quot; : &quot;zhangsan1&quot;, &quot;age&quot; : <span class="number">30</span> &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60e56b992b2a0b777e5a1103&quot;), &quot;name&quot; : &quot;zhangsan1&quot;, &quot;age&quot; : <span class="number">20</span> &#125;</span><br><span class="line"><span class="operator">&gt;</span> db.test1.findOne(&#123;&quot;name&quot;: &quot;zhangsan1&quot;&#125;)</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;60e56aa72b2a0b777e5a1102&quot;),</span><br><span class="line">        &quot;name&quot; : &quot;zhangsan1&quot;,</span><br><span class="line">        &quot;age&quot; : <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="operator">&gt;</span> db.test1.find(&#123;&quot;name&quot;: &quot;zhangsan1&quot;&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;60e56aa72b2a0b777e5a1102&quot;),</span><br><span class="line">        &quot;name&quot; : &quot;zhangsan1&quot;,</span><br><span class="line">        &quot;age&quot; : <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;101&quot;, &quot;name&quot; : &quot;zhangsan1&quot;, &quot;age&quot; : <span class="number">30</span> &#125;</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;60e56b992b2a0b777e5a1103&quot;),</span><br><span class="line">        &quot;name&quot; : &quot;zhangsan1&quot;,</span><br><span class="line">        &quot;age&quot; : <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-数据更新"><a href="#1-5-数据更新" class="headerlink" title="1.5 数据更新"></a>1.5 数据更新</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.collection_name.update(<span class="operator">&lt;</span>query<span class="operator">&gt;</span>, <span class="operator">&lt;</span>update<span class="operator">&gt;</span>, &#123;multi: <span class="operator">&lt;</span><span class="type">boolean</span><span class="operator">&gt;</span>&#125;)</span><br><span class="line"># query：查询条件</span><br><span class="line"># update：更新操作符</span><br><span class="line"># multi：可选，默认<span class="literal">false</span>，表示只更新找到第一条记录，<span class="literal">true</span>表示把满足条件的文档全部更新。</span><br><span class="line"># 例：</span><br><span class="line">db.collect_name.update(&#123;&quot;name&quot;: &quot;hr&quot;&#125;, &#123;&quot;name&quot;: &quot;mnc&quot;&#125;) 更新一条</span><br><span class="line">会将满足条件内容替换成后面内容</span><br><span class="line"></span><br><span class="line"># 更新前：&#123; &quot;_id&quot; : ObjectId(&quot;60e56a9e2b2a0b777e5a1101&quot;), &quot;name&quot; : &quot;zhangsan&quot;, &quot;age&quot; : <span class="number">18</span> &#125;</span><br><span class="line"><span class="operator">&gt;</span> db.test1.update(&#123;&quot;name&quot;: &quot;zhangsan&quot;&#125;, &#123;&quot;name&quot;: &quot;lisi&quot;&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nMatched&quot; : <span class="number">1</span>, &quot;nUpserted&quot; : <span class="number">0</span>, &quot;nModified&quot; : <span class="number">1</span> &#125;)</span><br><span class="line"><span class="operator">&gt;</span> db.test1.find()</span><br><span class="line"># 更新后：&#123; &quot;_id&quot; : ObjectId(&quot;60e56a9e2b2a0b777e5a1101&quot;), &quot;name&quot; : &quot;lisi&quot; &#125;</span><br><span class="line"></span><br><span class="line">db.collect_name.update(&#123;&quot;name&quot;: &quot;hr&quot;&#125;, &#123;$<span class="keyword">set</span>: &#123;name: &quot;hys&quot;&#125;&#125;) # 更新一条</span><br><span class="line"></span><br><span class="line"># $<span class="keyword">set</span>: 只替换对应键的值</span><br><span class="line"># 更新前：&#123; &quot;_id&quot; : ObjectId(&quot;60e572b22b2a0b777e5a1104&quot;), &quot;name&quot; : &quot;zhangsan2&quot;, &quot;age&quot; : <span class="number">20</span> &#125;</span><br><span class="line"><span class="operator">&gt;</span> db.test1.update(&#123;&quot;name&quot;: &quot;zhangsan2&quot;&#125;, &#123;$<span class="keyword">set</span>:&#123;&quot;name&quot;: &quot;lisi2&quot;&#125;&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nMatched&quot; : <span class="number">1</span>, &quot;nUpserted&quot; : <span class="number">0</span>, &quot;nModified&quot; : <span class="number">1</span> &#125;)</span><br><span class="line"># 更新后：&#123; &quot;_id&quot; : ObjectId(&quot;60e572b22b2a0b777e5a1104&quot;), &quot;name&quot; : &quot;lisi2&quot;, &quot;age&quot; : <span class="number">20</span> &#125;</span><br><span class="line"></span><br><span class="line">db.collect_name.update(&#123;&#125;, &#123;$<span class="keyword">set</span>:&#123;gender: <span class="number">0</span>&#125;&#125;, &#123;multi: <span class="literal">true</span>&#125;) # 更新全部</span><br></pre></td></tr></table></figure>

<h3 id="1-6-数据删除"><a href="#1-6-数据删除" class="headerlink" title="1.6 数据删除"></a>1.6 数据删除</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.collection_name.remove(<span class="operator">&lt;</span>query<span class="operator">&gt;</span>, &#123;justOne: <span class="operator">&lt;</span><span class="type">boolean</span><span class="operator">&gt;</span>&#125;)</span><br><span class="line"># 参数query：可选，删除文档的条件</span><br><span class="line"># 参数justOne：可选，如果设为<span class="literal">true</span>或<span class="number">1</span>，则只删除一条，默认<span class="literal">false</span>，表示删除多条。</span><br></pre></td></tr></table></figure>

<h3 id="1-7-数据类型："><a href="#1-7-数据类型：" class="headerlink" title="1.7 数据类型："></a>1.7 数据类型：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">object ID：文档ID</span><br><span class="line">相当于MySQL中的主键，保证文档的唯一性。可以自己设置，如果插入数据没有提供那么会自动生成一个独特的_id，</span><br><span class="line">objectID是一个12字节的十六进制数：</span><br><span class="line">前4个字节为当前时间戳</span><br><span class="line">之后3个字节是机器ID</span><br><span class="line">接下来两个字节是MongoDB的服务进程id</span><br><span class="line">最后3个字节是简单的增量值</span><br><span class="line"></span><br><span class="line">string：字符串，最常用，必须是有效的UTF-8</span><br><span class="line">boolean：存储一个布尔值，true/false</span><br><span class="line">integer：整数可以是32/64，这取决于服务器</span><br><span class="line">double：存储浮点型</span><br><span class="line">arrays：数据或列表，多个值存储到一个键</span><br><span class="line">object：用于嵌入式的文档，即一个值为一个文档</span><br><span class="line">null：存储null值</span><br><span class="line">timestamp：时间戳</span><br><span class="line">date：存储当前时间的UNIX时间格式。</span><br><span class="line">- 总结：与json数据类型相似。</span><br></pre></td></tr></table></figure>
<h3 id="1-8-查询指定字段数据，去重"><a href="#1-8-查询指定字段数据，去重" class="headerlink" title="1.8 查询指定字段数据，去重"></a>1.8 查询指定字段数据，去重</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.collection_name.distinct(&quot;key_name&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="1-9-操作数据结果集"><a href="#1-9-操作数据结果集" class="headerlink" title="1.9 操作数据结果集"></a>1.9 操作数据结果集</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 统计查询数量</span><br><span class="line">db.collection_name.find().<span class="built_in">count</span>()</span><br><span class="line"># 结果集排序</span><br><span class="line"># 升序 key_name: <span class="number">1</span></span><br><span class="line">db.collection_name.find().sort(&#123;salary: <span class="number">1</span>&#125;)</span><br><span class="line"># 降序 key_name: <span class="number">-1</span></span><br><span class="line">db.collection_name.find().sort(&#123;salary: <span class="number">-1</span>&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="1-10-查询结果是否存在某个字段"><a href="#1-10-查询结果是否存在某个字段" class="headerlink" title="1.10 查询结果是否存在某个字段"></a>1.10 查询结果是否存在某个字段</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询不存在age字段，但是有gender字段</span><br><span class="line">db.collection_name.find(&#123;age: &#123;$<span class="keyword">exists</span>: <span class="literal">false</span>&#125;, gender: &#123;$<span class="keyword">exists</span>: <span class="literal">true</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="1-11-分组查询-group"><a href="#1-11-分组查询-group" class="headerlink" title="1.11 分组查询 group"></a>1.11 分组查询 <code>group</code></h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># aggregate</span><br><span class="line"># $<span class="keyword">group</span></span><br><span class="line"># 对应的聚合函数 $sum、$avg、$max、$min、$<span class="keyword">first</span>、$<span class="keyword">last</span></span><br><span class="line"># 与MySQL 分组对比</span><br><span class="line"># 例<span class="number">1</span>:</span><br><span class="line"><span class="keyword">select</span> id, <span class="built_in">avg</span>(salary) <span class="keyword">as</span> avg_salaey <span class="keyword">from</span> table_name <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">3</span> <span class="keyword">group</span> <span class="keyword">by</span> post;</span><br><span class="line">db.collection_name.aggregate(</span><br><span class="line">	&#123;&quot;$match&quot;: &#123;&quot;_id&quot;: &#123;&quot;$gt&quot;: <span class="number">3</span>&#125;&#125;&#125;,</span><br><span class="line">	&#123;&quot;$group&quot;: &#123;&quot;_id&quot;: &quot;$post&quot;, &quot;avg_salaey&quot;: &#123;&quot;$avg&quot;: &quot;$salary&quot;&#125;&#125;&#125;</span><br><span class="line">)</span><br><span class="line"># 例<span class="number">2</span>:</span><br><span class="line"># 多个字段分组</span><br><span class="line">db.collection_name.aggregate(</span><br><span class="line">	&#123;&quot;$match&quot;: &#123;&quot;TYPE_CODE&quot;: &#123;&quot;$regex&quot;: &quot;^1203&quot;&#125;, &quot;PRV&quot;: &#123;&quot;$in&quot;: [&quot;北京市&quot;, &quot;上海市&quot;]&#125;&#125;&#125;,</span><br><span class="line">	&#123;&quot;$group&quot;: &#123;<span class="string">&#x27;_id&#x27;</span>: &#123;<span class="string">&#x27;PRV&#x27;</span>: &quot;$PRV&quot;, &quot;TYPE_CODE&quot;: &quot;$TYPE_CODE&quot;&#125;, &quot;count&quot;: &#123;&quot;$sum&quot;: <span class="number">1</span>&#125;&#125;&#125;,</span><br><span class="line">	&#123;&quot;$match&quot;: &#123;&quot;count&quot;: &#123;&quot;$gt&quot;: <span class="number">1000</span>&#125;&#125;&#125;</span><br><span class="line">)</span><br><span class="line"># 注：<span class="keyword">match</span> 与 <span class="keyword">group</span> 没有特定顺序，可以进行多次条件查询。操作查询过程中，每一个操作像是一个管道接收上一个的数据进行处理在传给下一个。</span><br></pre></td></tr></table></figure>

<h2 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2. 运算符"></a>2. 运算符</h2><h3 id="2-1-比较运算符"><a href="#2-1-比较运算符" class="headerlink" title="2.1 比较运算符"></a>2.1 比较运算符</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 等于：默认是等于判断，没有运算符</span><br><span class="line"># 小于：$lt		(less than)</span><br><span class="line"># 小于等于：$lte	(less than equal)</span><br><span class="line"># 大于：$gt		(greater than)</span><br><span class="line"># 大于等于：$gte	(greater than equal)</span><br><span class="line"># 不等于：$ne</span><br><span class="line"></span><br><span class="line">db.stu.find(&#123;&quot;age&quot;: &#123;$gte: <span class="number">18</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-2-范围运算符"><a href="#2-2-范围运算符" class="headerlink" title="2.2 范围运算符"></a>2.2 范围运算符</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># $<span class="keyword">in</span>，$nin 判断是否在某个范围内</span><br><span class="line"># 查询年龄<span class="number">18</span>, <span class="number">28</span>的学生：</span><br><span class="line">db.stu.find(&#123;&quot;age&quot;: &#123;$<span class="keyword">in</span>: [<span class="number">18</span>, <span class="number">28</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-3-逻辑运算符"><a href="#2-3-逻辑运算符" class="headerlink" title="2.3 逻辑运算符"></a>2.3 逻辑运算符</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">and</span>：直接在json文档中写多个条件</span><br><span class="line"># 查询年龄大于等于<span class="number">18</span>，并且性别为<span class="literal">true</span>的学生</span><br><span class="line">db.stu.find(&#123;age: &#123;$gte: <span class="number">18</span>&#125;, gender: <span class="literal">true</span>&#125;)</span><br><span class="line"># <span class="keyword">or</span>：使用$<span class="keyword">or</span>，值为数组，数组中元素为json</span><br><span class="line"># 查询年龄大于<span class="number">18</span>，或者性别为<span class="literal">false</span>的学生</span><br><span class="line">db.stu.find(&#123;$<span class="keyword">or</span>: [&#123;age: &#123;$gt: <span class="number">18</span>&#125;&#125;, &#123;gender: <span class="literal">false</span>&#125;]&#125;)</span><br><span class="line"># 查询年龄大于<span class="number">18</span>或性别为<span class="literal">true</span>，并且姓名是gj</span><br><span class="line">db.stu.find(&#123;$<span class="keyword">or</span>: [&#123;age: &#123;$gt: <span class="number">18</span>&#125;&#125;, &#123;gender: <span class="literal">true</span>&#125;], name: &quot;gj&quot;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-4-正则表达式"><a href="#2-4-正则表达式" class="headerlink" title="2.4 正则表达式"></a>2.4 正则表达式</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 使用<span class="operator">/</span><span class="operator">/</span> 或 $regex 编写正则表达式</span><br><span class="line"># 查询sku键中包含abc 的数据</span><br><span class="line">db.collect_name.find(&#123;sku: <span class="operator">/</span>abc<span class="operator">/</span>&#125;)</span><br><span class="line"># 查询sku键以abc开头的值对应的数据：</span><br><span class="line">db.collect_name.find(&#123;sku: <span class="operator">/</span><span class="operator">^</span>abc<span class="operator">/</span>&#125;)</span><br><span class="line"># 查询sku键以<span class="number">789</span>结尾的值对应的数据：</span><br><span class="line">db.collect_name.find(&#123;sku: &#123;$regex: <span class="string">&#x27;789$&#x27;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-5-limit、skip"><a href="#2-5-limit、skip" class="headerlink" title="2.5 limit、skip"></a>2.5 limit、skip</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># limit()：用于读取指定数量的文档</span><br><span class="line">db.collect_name.find().limit(number)</span><br><span class="line"># 查询前<span class="number">2</span>条学生记录</span><br><span class="line">db.stu.find().limit(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"># <span class="keyword">skip</span>()：用于跳过指定数量的文档，取之后的数据</span><br><span class="line">db.collect_time.find().<span class="keyword">skip</span>(number)</span><br><span class="line"># 查询前两条之后的数据</span><br><span class="line">db.collect_time.find().<span class="keyword">skip</span>(<span class="number">2</span>)</span><br><span class="line"># 同时使用：</span><br><span class="line"></span><br><span class="line">db.collect_time.find().limit(<span class="number">2</span>).<span class="keyword">skip</span>(<span class="number">3</span>)</span><br><span class="line"># 等价</span><br><span class="line">db.collect_time.find().<span class="keyword">skip</span>(<span class="number">3</span>).limit(<span class="number">2</span>)</span><br><span class="line"># 注意：当需要limit，<span class="keyword">skip</span>同时使用时，如果查询的集合元素数据量很大的情况下，应该先<span class="keyword">skip</span>，之后在limit</span><br></pre></td></tr></table></figure>

<h3 id="2-6-自定义查询"><a href="#2-6-自定义查询" class="headerlink" title="2.6 自定义查询"></a>2.6 自定义查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 使用$<span class="keyword">where</span> 后面写一个函数，返回满足条件的数据</span><br><span class="line"># 查询年龄大于<span class="number">30</span>的学生</span><br><span class="line">db.stu.find(&#123;$<span class="keyword">where</span>: <span class="keyword">function</span>()&#123;<span class="keyword">return</span> this.age <span class="operator">&gt;</span> <span class="number">30</span>;&#125;&#125;) </span><br></pre></td></tr></table></figure>

<h3 id="2-7-查询投影"><a href="#2-7-查询投影" class="headerlink" title="2.7 查询投影"></a>2.7 查询投影</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 只需要返回指定字段，默认不写，返回全部字段</span><br><span class="line">db.collect_name.find(&#123;条件&#125;, &#123;字段名称<span class="number">1</span>: <span class="number">1</span>,....&#125;)</span><br><span class="line"># 返回符合条件的数据，其中返回字段有_id，字段名称<span class="number">1</span></span><br><span class="line"># 特殊：如果返回不包含_id，则需要给_id<span class="operator">=</span><span class="number">0</span>。</span><br><span class="line"># 注意：字段名称为<span class="number">0</span>，只对_id有效，其他字段置<span class="number">0</span>会报错。</span><br><span class="line"># 如果没有条件，需要查询全部，则条件为空&#123;&#125;，如果不写则默认第一个为条件，不会产生查询投影，只返回指定字段。</span><br><span class="line"><span class="operator">&gt;</span> db.test1.find(&#123;name: &quot;zhangsan1&quot;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60e56aa72b2a0b777e5a1102&quot;), &quot;name&quot; : &quot;zhangsan1&quot;, &quot;age&quot; : <span class="number">20</span> &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;101&quot;, &quot;name&quot; : &quot;zhangsan1&quot;, &quot;age&quot; : <span class="number">30</span> &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60e56b992b2a0b777e5a1103&quot;), &quot;name&quot; : &quot;zhangsan1&quot;, &quot;age&quot; : <span class="number">20</span> &#125;</span><br><span class="line"><span class="operator">&gt;</span> db.test1.find(&#123;name: &quot;zhangsan1&quot;&#125;, &#123;name:<span class="number">1</span>&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60e56aa72b2a0b777e5a1102&quot;), &quot;name&quot; : &quot;zhangsan1&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;101&quot;, &quot;name&quot; : &quot;zhangsan1&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;60e56b992b2a0b777e5a1103&quot;), &quot;name&quot; : &quot;zhangsan1&quot; &#125;</span><br><span class="line"><span class="operator">&gt;</span> db.test1.find(&#123;name: &quot;zhangsan1&quot;&#125;, &#123;name:<span class="number">1</span>, _id: <span class="number">0</span>&#125;)</span><br><span class="line">&#123; &quot;name&quot; : &quot;zhangsan1&quot; &#125;</span><br><span class="line">&#123; &quot;name&quot; : &quot;zhangsan1&quot; &#125;</span><br><span class="line">&#123; &quot;name&quot; : &quot;zhangsan1&quot; &#125;</span><br><span class="line"><span class="operator">&gt;</span> db.test1.find(&#123;name: &quot;zhangsan1&quot;&#125;, &#123;name:<span class="number">1</span>, age: <span class="number">0</span>&#125;)</span><br><span class="line">Error: error: &#123;</span><br><span class="line">        &quot;ok&quot; : <span class="number">0</span>,</span><br><span class="line">        &quot;errmsg&quot; : &quot;Projection cannot have a mix of inclusion and exclusion.&quot;,</span><br><span class="line">        &quot;code&quot; : <span class="number">2</span>,</span><br><span class="line">        &quot;codeName&quot; : &quot;BadValue&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-创建索引"><a href="#3-创建索引" class="headerlink" title="3. 创建索引"></a>3. 创建索引</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 默认情况下索引字段的值可以相同</span><br><span class="line">db.collect_name.ensureIndex(&#123;属性: <span class="number">1</span>&#125;)，<span class="number">1</span>表示升序；<span class="number">-1</span>表示降序</span><br><span class="line"></span><br><span class="line"># 测试：插入<span class="number">10</span>w条数据到数据库中</span><br><span class="line"><span class="keyword">for</span>(i<span class="operator">=</span><span class="number">0</span>;i<span class="operator">&lt;</span><span class="number">100000</span>;i<span class="operator">+</span><span class="operator">+</span>)&#123;db.test2.insert(&#123;name: <span class="string">&#x27;test&#x27;</span> <span class="operator">+</span> i, age: i&#125;)&#125;</span><br><span class="line"></span><br><span class="line"># 创建索引之前：</span><br><span class="line">db.test2.find(&#123;name: <span class="string">&#x27;test90000&#x27;</span>&#125;)</span><br><span class="line">db.test2.find(&#123;name: <span class="string">&#x27;test90000&#x27;</span>&#125;).explain(<span class="string">&#x27;executionStats&#x27;</span>)</span><br><span class="line"></span><br><span class="line"># 创建索引后：</span><br><span class="line">db.test2.find(&#123;name: <span class="string">&#x27;test90000&#x27;</span>&#125;)</span><br><span class="line">db.test2.find(&#123;name: <span class="string">&#x27;test90000&#x27;</span>&#125;).explain(<span class="string">&#x27;executionStats&#x27;</span>)</span><br><span class="line"></span><br><span class="line"># 创建唯一索引</span><br><span class="line"><span class="keyword">unique</span><span class="operator">=</span><span class="literal">true</span></span><br><span class="line">创建唯一索引之前，应该保证对应字段不重复。否则创建索引失败。</span><br><span class="line">db.collection_name.ensureIndex(&#123;name: <span class="number">1</span>&#125;, &#123;<span class="keyword">unique</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"># 创建联合索引</span><br><span class="line">db.collection_name.ensureIndex(&#123;name: <span class="number">1</span>, age: <span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"># 查看当前集合的所有索引</span><br><span class="line">db.collection_name.getIndexes()</span><br><span class="line"></span><br><span class="line"># 删除索引</span><br><span class="line">db.collection_name.dropIndex(<span class="string">&#x27;索引名称&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="4-数据备份和恢复"><a href="#4-数据备份和恢复" class="headerlink" title="4. 数据备份和恢复"></a>4. 数据备份和恢复</h2><h3 id="4-1-数据备份"><a href="#4-1-数据备份" class="headerlink" title="4.1 数据备份"></a>4.1 数据备份</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongodump -h dbhost -d dbname -o dbdirectory</span><br><span class="line"><span class="meta">#</span><span class="bash"> -h：服务器地址，可以指定端口号</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d：需要备份的数据库名称</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -o：备份的数据存放位置，此目录存放着备份出来的数据</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例：</span></span><br><span class="line">mongodump -h 192.168.0.1:27017 -d test1 -o ~/Desktop/test1bak</span><br></pre></td></tr></table></figure>

<h3 id="4-2-数据恢复"><a href="#4-2-数据恢复" class="headerlink" title="4.2 数据恢复"></a>4.2 数据恢复</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongorestore -h dbhost -d dbname --dir dbdirectory</span><br><span class="line"><span class="meta">#</span><span class="bash"> -h：服务器地址，可以指定端口号</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d：需要恢复的数据库名称</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --dir：备份的数据存放位置</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例：</span></span><br><span class="line">mongorestore -h 192.168.0.1:27017 -d test1 --dir ~/Desktop/test1bak/test</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Nosql</category>
      </categories>
      <tags>
        <tag>mongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas 操作 Excel</title>
    <url>/2021/08/15/pandas%20%E6%93%8D%E4%BD%9CExcel/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul>
<li>模块安装</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pandas</span><br><span class="line">pip install openpyxl</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="1-Excel-数据读取"><a href="#1-Excel-数据读取" class="headerlink" title="1. Excel 数据读取"></a>1. <code>Excel</code> 数据读取</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  </span><br><span class="line">pf = pd.read_excel(<span class="string">&quot;amap_poicode.xlsx&quot;</span>, sheet_name=<span class="number">2</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">def read_excel(  </span></span><br><span class="line"><span class="string"> io, sheet_name=0, header=0, names=None, index_col=None, usecols=None, squeeze=False, dtype: DtypeArg | None = None, engine=None, converters=None, true_values=None, false_values=None, skiprows=None, nrows=None, na_values=None, keep_default_na=True, na_filter=True, verbose=False, parse_dates=False, date_parser=None, thousands=None, comment=None, skipfooter=0, convert_float=None, mangle_dupe_cols=True, storage_options: StorageOptions = None,):  </span></span><br><span class="line"><span class="string">	pass  </span></span><br><span class="line"><span class="string"># 参数解释：  </span></span><br><span class="line"><span class="string">1. io  </span></span><br><span class="line"><span class="string">excel 路径  </span></span><br><span class="line"><span class="string">2. sheet_name  </span></span><br><span class="line"><span class="string">默认为0。返回多表使用sheet_name=[0, 1];sheet_name=None是返回全表  </span></span><br><span class="line"><span class="string">3. header  </span></span><br><span class="line"><span class="string">默认为0。指定作为列名的行，即第一行，列名行以下的数据为操作数据。若数据不包含列名，则设定header=None。  </span></span><br><span class="line"><span class="string">4. skiprows  </span></span><br><span class="line"><span class="string">省略指定行数的数据  </span></span><br><span class="line"><span class="string">5. skipfooter  </span></span><br><span class="line"><span class="string">省略从尾部数的行数据  </span></span><br><span class="line"><span class="string">6. index_col  </span></span><br><span class="line"><span class="string">指定列为索引列，也可以使用u&#x27;string&#x27;  </span></span><br><span class="line"><span class="string">7. names  </span></span><br><span class="line"><span class="string">指定列的名字，传入一个list数据  </span></span><br><span class="line"><span class="string">8. mangle_dupe_cols  </span></span><br><span class="line"><span class="string">默认为True。重命名重复队列。等于False时，队列中有重复队列会报异常  </span></span><br><span class="line"><span class="string">9. nrows  </span></span><br><span class="line"><span class="string">默认None，解析全部。等于int时，要解析的行数。  </span></span><br><span class="line"><span class="string">10. thousands  </span></span><br><span class="line"><span class="string">默认None，千位分隔符，用于将字符串解析成数字。  </span></span><br><span class="line"><span class="string">11. convert_float  </span></span><br><span class="line"><span class="string">默认True，在可能的情况下，是否将float转换为int(即1.0 --&gt; 1)  </span></span><br><span class="line"><span class="string">12. dtype  </span></span><br><span class="line"><span class="string">默认None，即读取数据会按照可能的类型进行输出，  </span></span><br><span class="line"><span class="string">str，即读取返回的数据为str  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="1-1-查看数据表行数和列数"><a href="#1-1-查看数据表行数和列数" class="headerlink" title="1.1 查看数据表行数和列数"></a>1.1 查看数据表行数和列数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(pf.shape)</span><br><span class="line"><span class="comment"># (869, 8)</span></span><br></pre></td></tr></table></figure>
<h4 id="1-2-查看列名"><a href="#1-2-查看列名" class="headerlink" title="1.2 查看列名"></a>1.2 查看列名</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(pf.columns)</span><br><span class="line"><span class="comment"># Index([&#x27;序号&#x27;, &#x27;NEW_TYPE&#x27;, &#x27;大类&#x27;, &#x27;中类&#x27;, &#x27;小类&#x27;, &#x27;Big Category&#x27;, &#x27;Mid Category&#x27;, &#x27;Sub Category&#x27;], dtype=&#x27;object&#x27;)</span></span><br></pre></td></tr></table></figure>
<h4 id="1-3-查看部分行数据"><a href="#1-3-查看部分行数据" class="headerlink" title="1.3 查看部分行数据"></a>1.3 查看部分行数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1）查看前几行--&gt;head()默认查看前五行</span></span><br><span class="line"><span class="comment"># 查看前三行数据</span></span><br><span class="line"><span class="built_in">print</span>(df.head(<span class="number">3</span>)) </span><br><span class="line"><span class="comment"># 2）查看最后几行--&gt;tail() 默认查看最后五行</span></span><br><span class="line"><span class="comment"># 查看最后三行</span></span><br><span class="line"><span class="built_in">print</span>(df.tail(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<h4 id="1-4-添加索引"><a href="#1-4-添加索引" class="headerlink" title="1.4 添加索引"></a>1.4 添加索引</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认情况下，会自动创建一列索引</span></span><br><span class="line"><span class="comment"># 设置指定列为索引</span></span><br><span class="line"><span class="comment"># 1）数据表对象重新赋值</span></span><br><span class="line">df = df.set_index(<span class="string">&quot;索引列&quot;</span>)</span><br><span class="line"><span class="comment"># 之后对df 操作</span></span><br><span class="line"><span class="comment"># 2）直接在当前数据表对象修改设置</span></span><br><span class="line">df.set_index(<span class="string">&quot;索引列&quot;</span>, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<h4 id="1-5-遍历数据"><a href="#1-5-遍历数据" class="headerlink" title="1.5 遍历数据"></a>1.5 遍历数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># len(df) 行数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df)):</span><br><span class="line">    one_list = []</span><br><span class="line">    <span class="comment"># df.columns，表示列名</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> df.columns:</span><br><span class="line">        one_list.append(df[j][i])</span><br><span class="line">    <span class="built_in">print</span>(one_list)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">dict</span>(<span class="built_in">zip</span>(df.columns, one_list)))</span><br><span class="line"><span class="built_in">print</span>(df.columns)</span><br><span class="line"></span><br><span class="line"><span class="comment">####</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="string">[&#x27;867&#x27;, &#x27;991400&#x27;, &#x27;通行设施&#x27;, &#x27;临街院门&#x27;, &#x27;临街院门&#x27;, &#x27;Pass Facilities&#x27;, &#x27;Gate of Street House&#x27;, &#x27;Gate of Street House&#x27;]</span></span><br><span class="line"><span class="string">&#123;&#x27;序号&#x27;: &#x27;867&#x27;, &#x27;NEW_TYPE&#x27;: &#x27;991400&#x27;, &#x27;大类&#x27;: &#x27;通行设施&#x27;, &#x27;中类&#x27;: &#x27;临街院门&#x27;, &#x27;小类&#x27;: &#x27;临街院门&#x27;, &#x27;Big Category&#x27;: &#x27;Pass Facilities&#x27;, &#x27;Mid Category&#x27;: &#x27;Gate of Street House&#x27;, &#x27;Sub Category&#x27;: &#x27;Gate of Street House&#x27;&#125;</span></span><br><span class="line"><span class="string">[&#x27;868&#x27;, &#x27;991401&#x27;, &#x27;通行设施&#x27;, &#x27;临街院门&#x27;, &#x27;临街院正门&#x27;, &#x27;Pass Facilities&#x27;, &#x27;Gate of Street House&#x27;, &#x27;Main Entrance of Street House Gate&#x27;]</span></span><br><span class="line"><span class="string">&#123;&#x27;序号&#x27;: &#x27;868&#x27;, &#x27;NEW_TYPE&#x27;: &#x27;991401&#x27;, &#x27;大类&#x27;: &#x27;通行设施&#x27;, &#x27;中类&#x27;: &#x27;临街院门&#x27;, &#x27;小类&#x27;: &#x27;临街院正门&#x27;, &#x27;Big Category&#x27;: &#x27;Pass Facilities&#x27;, &#x27;Mid Category&#x27;: &#x27;Gate of Street House&#x27;, &#x27;Sub Category&#x27;: &#x27;Main Entrance of Street House Gate&#x27;&#125;</span></span><br><span class="line"><span class="string">[&#x27;869&#x27;, &#x27;991500&#x27;, &#x27;通行设施&#x27;, &#x27;虚拟门&#x27;, &#x27;虚拟门&#x27;, &#x27;Pass Facilities&#x27;, &#x27;Virtual Gate&#x27;, &#x27;Virtual Gate&#x27;]</span></span><br><span class="line"><span class="string">&#123;&#x27;序号&#x27;: &#x27;869&#x27;, &#x27;NEW_TYPE&#x27;: &#x27;991500&#x27;, &#x27;大类&#x27;: &#x27;通行设施&#x27;, &#x27;中类&#x27;: &#x27;虚拟门&#x27;, &#x27;小类&#x27;: &#x27;虚拟门&#x27;, &#x27;Big Category&#x27;: &#x27;Pass Facilities&#x27;, &#x27;Mid Category&#x27;: &#x27;Virtual Gate&#x27;, &#x27;Sub Category&#x27;: &#x27;Virtual Gate&#x27;&#125;</span></span><br><span class="line"><span class="string">Index([&#x27;序号&#x27;, &#x27;NEW_TYPE&#x27;, &#x27;大类&#x27;, &#x27;中类&#x27;, &#x27;小类&#x27;, &#x27;Big Category&#x27;, &#x27;Mid Category&#x27;,</span></span><br><span class="line"><span class="string">       &#x27;Sub Category&#x27;],</span></span><br><span class="line"><span class="string">      dtype=&#x27;object&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-生成指定格式的Excel"><a href="#2-生成指定格式的Excel" class="headerlink" title="2. 生成指定格式的Excel"></a>2. 生成指定格式的<code>Excel</code></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> 三行三列数据</span></span><br><span class="line"><span class="string"> A  B   C</span></span><br><span class="line"><span class="string"> 1  10  100</span></span><br><span class="line"><span class="string"> 2  20  200</span></span><br><span class="line"><span class="string"> 3  30  300</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">index_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">s1 = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], index=index_list, name=<span class="string">&quot;A&quot;</span>)</span><br><span class="line">s2 = pd.Series([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], index=index_list, name=<span class="string">&quot;B&quot;</span>)</span><br><span class="line">s3 = pd.Series([<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>], index=index_list, name=<span class="string">&quot;C&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 序列表示列</span></span><br><span class="line">df = pd.DataFrame(&#123;s1.name: s1, s2.name: s2, s3.name: s3&#125;)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">   A   B    C</span></span><br><span class="line"><span class="string">1  1  10  100</span></span><br><span class="line"><span class="string">2  2  20  200</span></span><br><span class="line"><span class="string">3  3  30  300</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 序列表示行</span></span><br><span class="line">df = pd.DataFrame([s1, s2, s3])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">     1    2    3</span></span><br><span class="line"><span class="string">A    1    2    3</span></span><br><span class="line"><span class="string">B   10   20   30</span></span><br><span class="line"><span class="string">C  100  200  300</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pandas</tag>
        <tag>excel</tag>
      </tags>
  </entry>
  <entry>
    <title>更改`centos` yum源</title>
    <url>/2021/08/13/yum%20%E6%9B%B4%E6%94%B9%E4%B8%BA%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84yum%E6%BA%90/</url>
    <content><![CDATA[<h3 id="1-切换目录"><a href="#1-切换目录" class="headerlink" title="1. 切换目录"></a>1. 切换目录</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/yum.repos.d/</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="2-备份之前的yum源"><a href="#2-备份之前的yum源" class="headerlink" title="2. 备份之前的yum源"></a>2. 备份之前的<code>yum</code>源</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv CentOS-Base.repo CentOS-Base.repo.bk</span><br></pre></td></tr></table></figure>

<h3 id="3-下载阿里云yum源"><a href="#3-下载阿里云yum源" class="headerlink" title="3. 下载阿里云yum源"></a>3. 下载阿里云<code>yum</code>源</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 根据对应的Centos版本下载对应的yum源</span><br><span class="line">wget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br></pre></td></tr></table></figure>
<h3 id="4-缓存到本地"><a href="#4-缓存到本地" class="headerlink" title="4. 缓存到本地"></a>4. 缓存到本地</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure>

<ul>
<li><p>如果上述命令执行报错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: Cannot retrieve metalink for repository: epel. Please verify its path and try again</span><br></pre></td></tr></table></figure></li>
<li><p>解决方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">建议用如下方法解决：检查/etc/yum.repos.d/下是否有epel.repo文件，如果有，重命名为epel.repo_bak 千万不能以.repo格式备份，然后在执行一次上面的命令即可！</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>yum</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>python 操作redis, 集合（set）类型</title>
    <url>/2021/08/13/python%20%E6%93%8D%E4%BD%9Credis,%20%E9%9B%86%E5%90%88%EF%BC%88set%EF%BC%89%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol>
<li>好友/关注/粉丝/感兴趣的人集合；</li>
<li>随机展示，从一批需要展示的内容，再从中随机获取需要展示的内容；</li>
<li>黑名单，经常有业务出于安全性方面的考虑，需要设置用户黑名单、ip黑名单、设备黑名单等，set类型适合存储这些黑名单数据，sismember命令可用于判断用户、ip、设备是否处于黑名单之中。<span id="more"></span>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3></li>
</ol>
<blockquote>
<p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p>
</blockquote>
<blockquote>
<p>Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p>
</blockquote>
<blockquote>
<p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p>
</blockquote>
<h3 id="python-操作redis-集合（set）类型-常用的操作方法"><a href="#python-操作redis-集合（set）类型-常用的操作方法" class="headerlink" title="python 操作redis, 集合（set）类型, 常用的操作方法"></a>python 操作redis, 集合（set）类型, 常用的操作方法</h3><ol>
<li>sadd(name, *values) 集合中添加元素</li>
<li>scard(name)         查看集合长度</li>
<li>smembers(name)      获取集合中所有的成员</li>
<li>sscan(name, cursor=0, match=None, count=None)  获取集合中所有的成员–元组形式</li>
<li>sscan_iter(name, match=None, count=None)       获取集合中所有的成员–迭代器的方式</li>
<li>sdiff(keys, *args)  差集<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取在set1不在set2元素</span></span><br><span class="line"><span class="built_in">print</span>(r.sdiff(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>))</span><br><span class="line"><span class="comment"># 获取在set2不在set1元素</span></span><br><span class="line"><span class="built_in">print</span>(r.sdiff(<span class="string">&quot;set2&quot;</span>, <span class="string">&quot;set1&quot;</span>))</span><br></pre></td></tr></table></figure></li>
<li>sdiffstore(dest, keys, *args)                   获取差集，并将差集存在一个新的集合中<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">r.sdiffstore(<span class="string">&quot;set3&quot;</span>, <span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.smembers(<span class="string">&quot;set3&quot;</span>))</span><br></pre></td></tr></table></figure></li>
<li>sinter(keys, *args)                              交集</li>
<li>sinterstore(dest, keys, *args)                   获取交集，并将交集存在一个新的集合中<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 交集</span></span><br><span class="line"><span class="built_in">print</span>(r.sinter(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>))</span><br><span class="line"><span class="comment"># 获取交集，并将交集存在一个新的集合中</span></span><br><span class="line">r.sinterstore(<span class="string">&quot;set4&quot;</span>, <span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.smembers(<span class="string">&quot;set4&quot;</span>))</span><br></pre></td></tr></table></figure></li>
<li>sunion(keys, *args)                              并集</li>
<li>sunionstore(dest, keys, *args)                   获取并集，并将并集存在一个新的集合中<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 并集</span></span><br><span class="line"><span class="built_in">print</span>(r.sunion(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>))</span><br><span class="line"><span class="comment"># 获取并集，并将并集存在一个新的集合中</span></span><br><span class="line">r.sunionstore(<span class="string">&quot;set5&quot;</span>, <span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.smembers(<span class="string">&quot;set5&quot;</span>))</span><br></pre></td></tr></table></figure></li>
<li>sismember(name, value)                            判断是否是集合的成员 类似in<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name --- 集合名字</span><br><span class="line">value --- 元素</span><br><span class="line">返回值True和False</span><br></pre></td></tr></table></figure></li>
<li>smove(src, dst, value)                            移动<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Move ``value`` from set ``src`` to set ``dst`` atomically&quot;</span><br><span class="line">将值value从src移动到dst</span><br></pre></td></tr></table></figure></li>
<li>spop(name, count=None)                             随机删除并且返回被删除值<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 从集合移除一个成员，并将其返回,说明一下，集合是无序的，所有是随机删除的</span><br><span class="line">r.spop(&quot;set1&quot;)</span><br><span class="line">print(r.smembers(&quot;set1&quot;))</span><br></pre></td></tr></table></figure></li>
<li>srem(name, *values)                                 删除指定值<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(r.srem(&quot;set1&quot;, &quot;5&quot;))</span><br><span class="line">如果值存在，返回1，否则返回0</span><br></pre></td></tr></table></figure>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line">ip = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port = <span class="number">6379</span></span><br><span class="line">db = <span class="number">0</span></span><br><span class="line"><span class="comment"># decode_responses=True:这样写存的数据是字符串格式</span></span><br><span class="line">r = redis.StrictRedis(</span><br><span class="line">    host=ip,</span><br><span class="line">    port=port,</span><br><span class="line">    db=db,</span><br><span class="line">    decode_responses=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 集合(set)</span></span><br><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line"><span class="comment"># r.sadd(&quot;set1&quot;, 1, 2, 3, 4, 5, 6)</span></span><br><span class="line">r.sadd(<span class="string">&quot;set2&quot;</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"><span class="comment"># 查看集合长度</span></span><br><span class="line">len1 = r.scard(<span class="string">&quot;set1&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(len1)</span><br><span class="line"><span class="comment"># 获取集合中所有的成员</span></span><br><span class="line"><span class="built_in">print</span>(r.smembers(<span class="string">&quot;set1&quot;</span>))</span><br><span class="line"><span class="comment"># 获取集合中所有的成员--元组形式</span></span><br><span class="line"><span class="built_in">print</span>(r.sscan(<span class="string">&quot;set1&quot;</span>))</span><br><span class="line"><span class="comment"># 获取集合中所有的成员--迭代器的方式</span></span><br><span class="line"><span class="comment"># print(r.sscan_iter(&quot;set1&quot;))</span></span><br><span class="line"><span class="comment"># for i in r.sscan_iter(&quot;set1&quot;):</span></span><br><span class="line"><span class="comment">#     print(i)</span></span><br><span class="line"><span class="comment"># 差集</span></span><br><span class="line"><span class="comment"># 获取在set1不在set2元素</span></span><br><span class="line"><span class="built_in">print</span>(r.sdiff(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>))</span><br><span class="line"><span class="comment"># 获取在set2不在set1元素</span></span><br><span class="line"><span class="built_in">print</span>(r.sdiff(<span class="string">&quot;set2&quot;</span>, <span class="string">&quot;set1&quot;</span>))</span><br><span class="line"><span class="comment"># 获取差集，并将差集存在一个新的集合中</span></span><br><span class="line">r.sdiffstore(<span class="string">&quot;set3&quot;</span>, <span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.smembers(<span class="string">&quot;set3&quot;</span>))</span><br><span class="line"><span class="comment"># 交集</span></span><br><span class="line"><span class="built_in">print</span>(r.sinter(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>))</span><br><span class="line"><span class="comment"># 获取交集，并将交集存在一个新的集合中</span></span><br><span class="line">r.sinterstore(<span class="string">&quot;set4&quot;</span>, <span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.smembers(<span class="string">&quot;set4&quot;</span>))</span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line"><span class="built_in">print</span>(r.sunion(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>))</span><br><span class="line"><span class="comment"># 获取并集，并将并集存在一个新的集合中</span></span><br><span class="line">r.sunionstore(<span class="string">&quot;set5&quot;</span>, <span class="string">&quot;set1&quot;</span>, <span class="string">&quot;set2&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.smembers(<span class="string">&quot;set5&quot;</span>))</span><br><span class="line"><span class="comment"># 判断是否是集合的成员 类似in</span></span><br><span class="line"><span class="built_in">print</span>(r.sismember(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;4&quot;</span>))</span><br><span class="line"><span class="comment"># 移动 将某个元素从一个集合移动到另一个集合</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(r.smembers(<span class="string">&quot;set1&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(r.smembers(<span class="string">&quot;set2&quot;</span>))</span><br><span class="line">r.smove(<span class="string">&quot;set2&quot;</span>, <span class="string">&quot;set1&quot;</span>, <span class="string">&quot;10&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.smembers(<span class="string">&quot;set1&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(r.smembers(<span class="string">&quot;set2&quot;</span>))</span><br><span class="line"><span class="comment"># 随机删除并且返回被删除值</span></span><br><span class="line"><span class="comment"># 从集合移除一个成员，并将其返回,说明一下，集合是无序的，所有是随机删除的</span></span><br><span class="line"><span class="comment"># r.spop(&quot;set1&quot;)</span></span><br><span class="line"><span class="comment"># print(r.smembers(&quot;set1&quot;))</span></span><br><span class="line"><span class="comment"># 删除指定值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(r.smembers(<span class="string">&quot;set1&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(r.srem(<span class="string">&quot;set1&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;1&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(r.smembers(<span class="string">&quot;set1&quot;</span>))</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Nosql</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>图形数据库</title>
    <url>/2021/08/13/%E5%9B%BE%E5%BD%A2%E6%95%B0%E6%8D%AE%E5%BA%93Neo4j/</url>
    <content><![CDATA[<h2 id="1-什么是图形数据库？"><a href="#1-什么是图形数据库？" class="headerlink" title="1. 什么是图形数据库？"></a>1. 什么是图形数据库？</h2><ul>
<li><code>Graph database</code> 是用来存储图结构的数据库。图形数据库是<code>NoSQL</code>数据库的一种类型。应用图形理论存储实体之间的关系信息。常见例子：社会网络中人与人之间的关系。<span id="more"></span></li>
<li>应用场景：<ul>
<li>社交领域：Facebook、Twitter用来管理社交关系，实现好友推荐；</li>
<li>零售领域：eBay、沃尔玛，用于实现商品实时推荐；  </li>
<li>金融领域：摩根大通、花旗等银行用来做风控处理；</li>
<li>电信领域：依靠图数据库管理网络；</li>
<li>酒店领域：万豪、雅高酒店等公司使用图数据库来管理复杂且快速变化的库存。</li>
</ul>
</li>
</ul>
<h2 id="2-neo4j-应用"><a href="#2-neo4j-应用" class="headerlink" title="2. neo4j 应用"></a>2. <code>neo4j</code> 应用</h2><h3 id="2-1-概念介绍"><a href="#2-1-概念介绍" class="headerlink" title="2.1 概念介绍"></a>2.1 概念介绍</h3><ul>
<li>节点：表示一个实体记录，相当于关系型数据库中的一条记录</li>
<li>关系：用于将节点关联起来构建图，简称为图论的边</li>
<li>属性：节点和关系可以有多个属性，属性是有键值对组成，相当于Python中的字典</li>
<li>标签：表示一组拥有相同属性的节点，相当于关系型数据库的表</li>
<li>路径：图中任意两个节点存在关系组成的路径</li>
</ul>
<h3 id="2-2-Cypher-查询语言"><a href="#2-2-Cypher-查询语言" class="headerlink" title="2.2 Cypher 查询语言"></a>2.2 <code>Cypher</code> 查询语言</h3><ul>
<li><code>Cypher</code> 是一种声明式图数据库查询语言，类似于关系型数据库中的SQL。</li>
<li>MATCH：匹配图模式</li>
<li>WHERE：过滤条件</li>
<li>RETURN：定义返回的结果</li>
</ul>
<p>基本语法</p>
<ul>
<li>增（CREATE）</li>
<li>删（DELETE）</li>
<li>改（SET）</li>
<li>查（MATCH）</li>
</ul>
<h3 id="2-4-用法举例"><a href="#2-4-用法举例" class="headerlink" title="2.4 用法举例"></a>2.4 用法举例</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 创建基础节点</span><br><span class="line"><span class="keyword">CREATE</span> (:pig&#123;name: &quot;猪爷爷&quot;, age: <span class="number">15</span>&#125;), (:pig&#123;name: &quot;猪奶奶&quot;, age: <span class="number">13</span>&#125;)</span><br><span class="line"></span><br><span class="line"># 基于已存在节点创建关系</span><br><span class="line"><span class="keyword">MATCH</span> (a:pig&#123;name: &quot;猪爷爷&quot;&#125;) <span class="keyword">MATCH</span> (b: pig&#123;name: &quot;猪奶奶&quot;&#125;) <span class="keyword">CREATE</span> (a) <span class="operator">-</span> [r: &quot;夫妻&quot;] <span class="operator">-</span><span class="operator">&gt;</span> (b)</span><br><span class="line"></span><br><span class="line"># 添加节点时创建关系</span><br><span class="line"><span class="keyword">CREATE</span> (:pig&#123;name: &quot;猪爸爸&quot;, age: <span class="number">12</span>&#125;) <span class="operator">-</span> [:夫妻] <span class="operator">-</span><span class="operator">&gt;</span> (:pig&#123;name: &quot;猪妈妈&quot;, age: <span class="number">9</span>&#125;)</span><br><span class="line"></span><br><span class="line"># 修改属性</span><br><span class="line"><span class="keyword">MATCH</span> (a: pig&#123;name: &quot;猪爸爸&quot;, age: <span class="number">12</span>&#125;) <span class="keyword">set</span> a.age<span class="operator">=</span><span class="number">10</span></span><br><span class="line"></span><br><span class="line"># 创建多标签节点</span><br><span class="line"><span class="keyword">CREATE</span> (a: pig: die&#123;name: &quot;猪祖父&quot;, age: <span class="number">15</span>&#125;) <span class="keyword">return</span> a.name</span><br><span class="line"></span><br><span class="line"># 删除节点</span><br><span class="line"><span class="keyword">MATCH</span> (n: die) <span class="keyword">delete</span> n</span><br></pre></td></tr></table></figure>

<h2 id="3-Neo4j-CQL"><a href="#3-Neo4j-CQL" class="headerlink" title="3. Neo4j CQL"></a>3. <code>Neo4j CQL</code></h2><h3 id="3-1-CQL-命令、介绍"><a href="#3-1-CQL-命令、介绍" class="headerlink" title="3.1 CQL 命令、介绍"></a>3.1 <code>CQL</code> 命令、介绍</h3><table>
<thead>
<tr>
<th><code>CQL</code> 命令</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>CREATE</td>
<td>创建节点、关系、属性</td>
</tr>
<tr>
<td>MATCH</td>
<td>检索有关节点、关系、属性数据</td>
</tr>
<tr>
<td>RETURN</td>
<td>返回查询条件</td>
</tr>
<tr>
<td>WHERE</td>
<td>提供条件过滤检索数据</td>
</tr>
<tr>
<td>REMOVE</td>
<td>删除节点和关系属性</td>
</tr>
<tr>
<td>ORDER BY</td>
<td>排序检索数据</td>
</tr>
<tr>
<td>SET</td>
<td>添加或更新标签</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>String</td>
<td>用于使用String</td>
</tr>
<tr>
<td>Aggregation</td>
<td>用于对<code>CQL</code>查询结果执行一些聚合操作</td>
</tr>
<tr>
<td>Relationship</td>
<td>用于获取关系的细节</td>
</tr>
</tbody></table>
<h3 id="3-2-CQL-数据类型"><a href="#3-2-CQL-数据类型" class="headerlink" title="3.2 CQL 数据类型"></a>3.2 <code>CQL</code> 数据类型</h3><ol>
<li><code>boolean</code> 表示：布尔文字（true, false）</li>
<li><code>byte</code> 表示八位整数；</li>
<li><code>short</code> 表示十六位整数；</li>
<li><code>int</code> 表示三十二位整数；</li>
<li><code>long</code> 表示六十四位整数；</li>
<li><code>float</code> 表示三十二位浮点数；</li>
<li><code>double</code> 表示六十四位浮点数；</li>
<li><code>char</code> 表示十六位字符；</li>
<li><code>String</code> 表示字符串。</li>
</ol>
<h3 id="3-2-CREATE-使用"><a href="#3-2-CREATE-使用" class="headerlink" title="3.2 CREATE 使用"></a>3.2 CREATE 使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># CREATE 创建节点、属性</span><br><span class="line">CREATE (</span><br><span class="line">	&lt;node-name&gt;: &lt;label-name&gt;</span><br><span class="line">	&#123;</span><br><span class="line">		&lt;Property1-name&gt;: &lt;Propertyn-name&gt;</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br><span class="line">&lt;node-name&gt; 节点名称；</span><br><span class="line">&lt;label-name&gt; 标签名称（相当于数据库表名）</span><br><span class="line">&lt;Property1-name&gt;: &lt;Propertyn-name&gt; 属性，键值对</span><br><span class="line"># 举例：</span><br><span class="line">create (emp: Employee&#123;id: 110, name: &quot;zhangsan&quot;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="3-3-MATCH-命令"><a href="#3-3-MATCH-命令" class="headerlink" title="3.3 MATCH 命令"></a>3.3 MATCH 命令</h3><ul>
<li>从数据库中获取有关节点、关系、属性数据。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 第一种</span><br><span class="line">MATCH (</span><br><span class="line">	&lt;node_name&gt;: &lt;label_name&gt;</span><br><span class="line">	&#123;</span><br><span class="line">		key: value</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br><span class="line">RETURN &lt;node_name&gt;</span><br><span class="line"># 第二种</span><br><span class="line">MATCH (</span><br><span class="line">	&lt;node_name&gt;: &lt;label_name&gt;</span><br><span class="line">)</span><br><span class="line">WHERE &lt;node_name&gt;.key = value</span><br><span class="line">RETURN &lt;node_name&gt;</span><br></pre></td></tr></table></figure>
<h3 id="3-4-DELETE-命令"><a href="#3-4-DELETE-命令" class="headerlink" title="3.4 DELETE 命令"></a>3.4 <code>DELETE</code> 命令</h3></li>
<li>删除节点或相关节点和关系，需要与MATCH 相结合。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MATCH (</span><br><span class="line">	&lt;node_name&gt;: &lt;label_name&gt;</span><br><span class="line">)</span><br><span class="line">WHERE &lt;node_name&gt;.key = value</span><br><span class="line">DELETE &lt;node_name&gt;</span><br><span class="line"># 例：</span><br><span class="line">match (a:Employee) where a.name=&quot;zhangsan&quot; delete a</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-5-REMOVE-删除"><a href="#3-5-REMOVE-删除" class="headerlink" title="3.5 REMOVE 删除"></a>3.5 <code>REMOVE</code> 删除</h3><ul>
<li>删除节点或关系的属性<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># DELETE/REMOVE 这两个命令不应单独使用。</span><br><span class="line"># 两个命令都应该与MATCH命令一起使用。</span><br><span class="line"># 查询删除指定的属性</span><br><span class="line">MATCH (</span><br><span class="line">	&lt;node_name&gt;: &lt;label_name&gt;</span><br><span class="line">)</span><br><span class="line">WHERE &lt;node_name&gt;.key = value</span><br><span class="line">REMOVE &lt;node_name&gt;.key*</span><br><span class="line"></span><br><span class="line"># 例：删除属性是张三对应的年龄属性</span><br><span class="line">match (a:Employee) where a.name=&quot;zhangsan&quot; remove a.age</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-6-SET-子句"><a href="#3-6-SET-子句" class="headerlink" title="3.6 SET 子句"></a>3.6 <code>SET</code> 子句</h3><ol>
<li>用于对现有节点或关系添加属性 </li>
<li>更新属性值</li>
</ol>
<ul>
<li>SET应该与MATCH命令一起使用<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MATCH (</span><br><span class="line">	&lt;node_name&gt;: &lt;label_name&gt;</span><br><span class="line">)</span><br><span class="line">WHERE &lt;node_name&gt;.key = value</span><br><span class="line">SET &lt;node_name&gt;.key1 = value1</span><br><span class="line"></span><br><span class="line"># 例：给属性是张三修改年龄属性值</span><br><span class="line">match (a:Employee) where a.name=&quot;zhangsan&quot; set a.age=10</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-7-ORDER-BY-排序"><a href="#3-7-ORDER-BY-排序" class="headerlink" title="3.7 ORDER BY 排序"></a>3.7 <code>ORDER BY</code> 排序</h3><ul>
<li>默认情况下，是按升序排列；添加<code>DESC</code>关键字，按降序进行排序。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MATCH (</span><br><span class="line">	&lt;node_name&gt;: &lt;label_name&gt;</span><br><span class="line">)</span><br><span class="line">WHERE &lt;node_name&gt;.key = value</span><br><span class="line">RETURN &lt;node_name&gt;</span><br><span class="line">ORDER BY &lt;node_name&gt;.key1</span><br><span class="line"></span><br><span class="line"># 例：查询name为张三，返回结果按对应年龄升序排序</span><br><span class="line">match (a:Employee) where a.name=&quot;zhangsan&quot; return a order by a.name </span><br></pre></td></tr></table></figure>
<h3 id="3-8-UNION-合并"><a href="#3-8-UNION-合并" class="headerlink" title="3.8 UNION 合并"></a>3.8 <code>UNION</code> 合并</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># UNION | UNION ALL</span><br><span class="line">error：All sub queries in an UNION must have the same column names。</span><br><span class="line">UNION 中的所有子查询必须具有相同的列名。</span><br><span class="line">例：</span><br><span class="line">match (a:Employee) return a.age as age, a.name as name union match (b:Employee1) return b.age as age, b.name as name</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-9-SKIP-LIMIT-子句"><a href="#3-9-SKIP-LIMIT-子句" class="headerlink" title="3.9 SKIP/LIMIT 子句"></a>3.9 <code>SKIP/LIMIT</code> 子句</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># LIMIT 子句</span><br><span class="line">MATCH (</span><br><span class="line">	&lt;node_name&gt;: &lt;label_name&gt;</span><br><span class="line">)</span><br><span class="line">WHERE &lt;node_name&gt;.key = value</span><br><span class="line">RETURN &lt;node_name&gt;</span><br><span class="line">LIMIT number</span><br><span class="line"># skip 子句</span><br><span class="line">MATCH (</span><br><span class="line">	&lt;node_name&gt;: &lt;label_name&gt;</span><br><span class="line">)</span><br><span class="line">WHERE &lt;node_name&gt;.key = value</span><br><span class="line">RETURN &lt;node_name&gt;</span><br><span class="line">SKIP number</span><br></pre></td></tr></table></figure>

<h3 id="3-10-CQL-合并"><a href="#3-10-CQL-合并" class="headerlink" title="3.10 CQL 合并"></a>3.10 <code>CQL</code> 合并</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MERGE = CREATE + MATCH</span><br><span class="line"># MERGE 命令在图中搜索给定模式。如果存在，则返回结果；如果不存在图数据库中，则创建新的节点、关系并返回结果。</span><br><span class="line">MERGE (</span><br><span class="line">	&lt;node-name&gt;: &lt;label-name&gt;</span><br><span class="line">	&#123;</span><br><span class="line">		&lt;Property1-name&gt;: &lt;Propertyn-name&gt;</span><br><span class="line">	&#125;</span><br><span class="line">)</span><br><span class="line">RETURN &lt;node-name&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-11-IN-操作符"><a href="#3-11-IN-操作符" class="headerlink" title="3.11 IN 操作符"></a>3.11 <code>IN</code> 操作符</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MATCH (&lt;node-name&gt;: &lt;label-name&gt;)</span><br><span class="line">WHERE &lt;node-name&gt;.key in [value1, value2]</span><br><span class="line">RETURN &lt;node-name&gt;</span><br><span class="line"></span><br><span class="line"># 例：查询名字是zhangsan/lisi</span><br><span class="line">match (a:Employee) where a.name in [&quot;zhangsan&quot;, &quot;lisi&quot;] return a</span><br></pre></td></tr></table></figure>
<h3 id="3-12-图形字体样式"><a href="#3-12-图形字体样式" class="headerlink" title="3.12 图形字体样式"></a>3.12 图形字体样式</h3><h2 id="4-Python-操作-neo4j"><a href="#4-Python-操作-neo4j" class="headerlink" title="4 Python 操作 neo4j"></a>4 <code>Python</code> 操作 <code>neo4j</code></h2><h3 id="4-1-安装模块"><a href="#4-1-安装模块" class="headerlink" title="4.1 安装模块"></a>4.1 安装模块</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install py2neo</span><br></pre></td></tr></table></figure>
<h3 id="4-2-Node-和-Relationship-对象"><a href="#4-2-Node-和-Relationship-对象" class="headerlink" title="4.2 Node 和 Relationship 对象"></a>4.2 <code>Node</code> 和 <code>Relationship</code> 对象</h3><h4 id="4-2-1-创建节点，关系对象"><a href="#4-2-1-创建节点，关系对象" class="headerlink" title="4.2.1 创建节点，关系对象"></a>4.2.1 创建节点，关系对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模块导入</span></span><br><span class="line"><span class="keyword">from</span> py2neo <span class="keyword">import</span> Node, Relationship</span><br><span class="line"><span class="comment"># 创建节点对象</span></span><br><span class="line"><span class="comment"># Node(标签, **属性)</span></span><br><span class="line"><span class="comment"># Node(&quot;Person_1&quot;, name=&quot;zhangsan&quot;, age=20)</span></span><br><span class="line"><span class="comment"># 创建节点对应标签是Person_1，其中有两个属性name，age</span></span><br><span class="line">a = Node(<span class="string">&quot;Person_1&quot;</span>, name=<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">b = Node(<span class="string">&quot;Person_1&quot;</span>, name=<span class="string">&quot;lisi&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;a：<span class="subst">&#123;a&#125;</span>&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;b：<span class="subst">&#123;b&#125;</span>&quot;</span>)  </span><br><span class="line"><span class="comment"># 创建a, b节点关系对象</span></span><br><span class="line">ab = Relationship(a, <span class="string">&quot;friend&quot;</span>, b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;ab：<span class="subst">&#123;ab&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">a：(:Person_1 &#123;name: &#x27;zhangsan&#x27;&#125;)</span></span><br><span class="line"><span class="string">b：(:Person_1 &#123;name: &#x27;lisi&#x27;&#125;)</span></span><br><span class="line"><span class="string">ab：(zhangsan)-[:friend &#123;&#125;]-&gt;(lisi)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="4-2-2-Node节点对象操作"><a href="#4-2-2-Node节点对象操作" class="headerlink" title="4.2.2 Node节点对象操作"></a>4.2.2 <code>Node</code>节点对象操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 判断节点是否相等，即节点对应ID是否相等</span></span><br><span class="line">node_1 == node_2</span><br><span class="line"><span class="comment"># 2. 查看节点对象hash值</span></span><br><span class="line"><span class="built_in">hash</span>(node_1)</span><br><span class="line"><span class="comment"># 3. 查看节点属性值</span></span><br><span class="line">node_1[key]</span><br><span class="line"><span class="comment"># 4. 添加/修改节点属性</span></span><br><span class="line">nede_1[key] = value</span><br><span class="line"><span class="comment"># 5. 删除节点属性，注意：如果属性key不存在，则报错。KeyError</span></span><br><span class="line"><span class="keyword">del</span> node_1[key]</span><br><span class="line"><span class="comment"># 6. 查看node上的属性长度</span></span><br><span class="line"><span class="built_in">len</span>(node_1)</span><br><span class="line"><span class="comment"># 7. 将node上的属性值按dict输出</span></span><br><span class="line"><span class="built_in">dict</span>(node_1)</span><br><span class="line"><span class="comment"># 8. 返回yield 节点</span></span><br><span class="line"><span class="keyword">from</span> py2neo <span class="keyword">import</span> walk</span><br><span class="line">walk(node_1)</span><br><span class="line"><span class="comment"># node_1：(:Person_1 &#123;age: 20, name: &#x27;zhangsan&#x27;&#125;)</span></span><br><span class="line"><span class="comment"># walk(node_1)：&lt;generator object Path.walk at 0x0000027F1580B510&gt;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> walk(node_1):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;111&quot;</span>, i)</span><br><span class="line"><span class="comment"># 111 (:Person_1 &#123;age: 20, name: &#x27;zhangsan&#x27;&#125;)</span></span><br><span class="line"><span class="comment"># 9. 返回节点对应标签</span></span><br><span class="line">node_1.labels</span><br><span class="line"><span class="comment"># 10. 判断节点是否具有特定标签</span></span><br><span class="line">node_1.has_label(<span class="string">&quot;标签名&quot;</span>)</span><br><span class="line"><span class="comment"># 11. 给节点添加标签</span></span><br><span class="line">node_1.add_label(<span class="string">&quot;标签名&quot;</span>)</span><br><span class="line"><span class="comment"># 12. 给节点添加多个标签</span></span><br><span class="line">node_1.update_labels([<span class="string">&quot;标签1&quot;</span>, <span class="string">&quot;标签2&quot;</span>, <span class="string">&quot;标签3&quot;</span>])</span><br><span class="line"><span class="comment"># 13. 节点标签移除。有对应标签直接移除；没有对应标签节点不做操作</span></span><br><span class="line">node_1.remove_label(<span class="string">&quot;标签名&quot;</span>)</span><br><span class="line"><span class="comment"># 14. 清除节点所有标签</span></span><br><span class="line">node_1.clear_label()</span><br></pre></td></tr></table></figure>
<h4 id="4-2-3-Relationship-节点关系对象"><a href="#4-2-3-Relationship-节点关系对象" class="headerlink" title="4.2.3 Relationship 节点关系对象"></a>4.2.3 <code>Relationship</code> 节点关系对象</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">start_node: 开始节点对象</span></span><br><span class="line"><span class="string">type: 关系类型。如：（朋友，夫妻，父子等）</span></span><br><span class="line"><span class="string">end_node: 结束节点对象</span></span><br><span class="line"><span class="string">关系对象创建方法：</span></span><br><span class="line"><span class="string">from py2neo import Relationship</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. Relationship(start_node, type, end_node, **属性键值对)</span></span><br><span class="line"><span class="string">2. Relationship(start_node, end_node, **属性键值对)</span></span><br><span class="line"><span class="string">3. Relationship(start_node, type, **属性键值对)</span></span><br><span class="line"><span class="string">4. Relationship(start_node, **属性键值对)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果没有指定关系类型，默认关系类型是 Relationship。可以通过继承Relationship类覆盖默认值。</span></span><br><span class="line"><span class="string">例：</span></span><br><span class="line"><span class="string">class WorksWith(Relationship):</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string"># 以这个类创建关系对象，默认关系类型是 WorksWith。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 关系对象操作</span></span><br><span class="line"><span class="comment"># 1. 判断关系是否相等 ==</span></span><br><span class="line"><span class="comment"># 2. 关系对象hash值</span></span><br><span class="line"><span class="built_in">hash</span>(relationship_1)</span><br><span class="line"><span class="comment"># 3. 查看关系属性值</span></span><br><span class="line">relationship_1[key]</span><br><span class="line"><span class="comment"># 4. 添加/修改关系对象属性</span></span><br><span class="line">relationship_1[key] = value</span><br><span class="line"><span class="comment"># 5. 删除关系对象属性，注意：如果属性key不存在，则报错。KeyError</span></span><br><span class="line"><span class="keyword">del</span> relationship_1[key]</span><br><span class="line"><span class="comment"># 6. 查看关系对象上的属性长度</span></span><br><span class="line"><span class="built_in">len</span>(relationship_1)</span><br><span class="line"><span class="comment"># 7. 将关系对象上的属性值按dict输出</span></span><br><span class="line"><span class="built_in">dict</span>(relationship_1)</span><br><span class="line"><span class="comment"># 8. 返回yield 节点</span></span><br><span class="line"><span class="keyword">from</span> py2neo <span class="keyword">import</span> walk</span><br><span class="line">walk(relationship_1)</span><br><span class="line"><span class="comment"># relationship_1：(zhangsan)-[:friend &#123;&#125;]-&gt;(lisi)</span></span><br><span class="line"><span class="comment"># walk(relationship_1)：&lt;generator object Path.walk at 0x0000019F95E9A510&gt;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> walk(relationship_1):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;111&quot;</span>, i)</span><br><span class="line"><span class="comment"># 111 (:Person_1 &#123;name: &#x27;zhangsan&#x27;&#125;)</span></span><br><span class="line"><span class="comment"># 111 (zhangsan)-[:friend &#123;&#125;]-&gt;(lisi)</span></span><br><span class="line"><span class="comment"># 111 (:Person_1 &#123;name: &#x27;lisi&#x27;&#125;)</span></span><br><span class="line"><span class="comment"># 9. 返回关系类型</span></span><br><span class="line"><span class="built_in">type</span>(relationship_1)</span><br><span class="line"><span class="comment"># &lt;class &#x27;py2neo.data.friend&#x27;&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-Subgraph-对象"><a href="#4-3-Subgraph-对象" class="headerlink" title="4.3 Subgraph 对象"></a>4.3 <code>Subgraph</code> 对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例：</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-  </span></span><br><span class="line"><span class="keyword">from</span> py2neo <span class="keyword">import</span> Node, Relationship, Subgraph  </span><br><span class="line"></span><br><span class="line">a = Node(<span class="string">&quot;Person_1&quot;</span>, name=<span class="string">&quot;zhangsan&quot;</span>)  </span><br><span class="line">b = Node(<span class="string">&quot;Person_1&quot;</span>, name=<span class="string">&quot;lisi&quot;</span>)  </span><br><span class="line">c = Node(<span class="string">&quot;Person_1&quot;</span>, name=<span class="string">&quot;wangwu&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;a：<span class="subst">&#123;a&#125;</span>&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;b：<span class="subst">&#123;b&#125;</span>&quot;</span>)  </span><br><span class="line">ab = Relationship(a, <span class="string">&quot;friend&quot;</span>, b)  </span><br><span class="line">ac = Relationship(a, <span class="string">&quot;classmate&quot;</span>, c)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;ab：<span class="subst">&#123;ab&#125;</span>&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;ac：<span class="subst">&#123;ac&#125;</span>&quot;</span>)  </span><br><span class="line">s = ab | ac  </span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;~&quot;</span> * <span class="number">50</span>)  </span><br><span class="line"><span class="built_in">print</span>(s.nodes)  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s.nodes:  </span><br><span class="line">    <span class="built_in">print</span>(i)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;~&quot;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(s.relationships)  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s.relationships:  </span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">a：(:Person_1 &#123;name: &#x27;zhangsan&#x27;&#125;)</span></span><br><span class="line"><span class="string">b：(:Person_1 &#123;name: &#x27;lisi&#x27;&#125;)</span></span><br><span class="line"><span class="string">ab：(zhangsan)-[:friend &#123;&#125;]-&gt;(lisi)</span></span><br><span class="line"><span class="string">ac：(zhangsan)-[:classmate &#123;&#125;]-&gt;(wangwu)</span></span><br><span class="line"><span class="string">Subgraph(&#123;Node(&#x27;Person_1&#x27;, name=&#x27;zhangsan&#x27;), Node(&#x27;Person_1&#x27;, name=&#x27;lisi&#x27;), Node(&#x27;Person_1&#x27;, name=&#x27;wangwu&#x27;)&#125;, &#123;friend(Node(&#x27;Person_1&#x27;, name=&#x27;zhangsan&#x27;), Node(&#x27;Person_1&#x27;, name=&#x27;lisi&#x27;)), classmate(Node(&#x27;Person_1&#x27;, name=&#x27;zhangsan&#x27;), Node(&#x27;Person_1&#x27;, name=&#x27;wangwu&#x27;))&#125;)</span></span><br><span class="line"><span class="string">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="string">&lt;py2neo.collections.SetView object at 0x0000021CF0F3BFD0&gt;</span></span><br><span class="line"><span class="string">(:Person_1 &#123;name: &#x27;zhangsan&#x27;&#125;)</span></span><br><span class="line"><span class="string">(:Person_1 &#123;name: &#x27;lisi&#x27;&#125;)</span></span><br><span class="line"><span class="string">(:Person_1 &#123;name: &#x27;wangwu&#x27;&#125;)</span></span><br><span class="line"><span class="string">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span><br><span class="line"><span class="string">&lt;py2neo.collections.SetView object at 0x0000021CF0F98940&gt;</span></span><br><span class="line"><span class="string">(zhangsan)-[:friend &#123;&#125;]-&gt;(lisi)</span></span><br><span class="line"><span class="string">(zhangsan)-[:classmate &#123;&#125;]-&gt;(wangwu)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="4-3-1-运算符"><a href="#4-3-1-运算符" class="headerlink" title="4.3.1 运算符"></a>4.3.1 运算符</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># &#x27;|&#x27; 或。包含来自子图的所有节点和关系，两者共有的任何实体只包含一次。</span></span><br><span class="line"><span class="comment"># &#x27;&amp;&#x27; 与。返回共有的所有节点和关系。</span></span><br><span class="line"><span class="comment"># -</span></span><br><span class="line"><span class="comment"># ^</span></span><br><span class="line">注意：这部分运算符与集合操作运算符一致。</span><br></pre></td></tr></table></figure>
<h4 id="4-3-2-Subgraph-对象属性和方法"><a href="#4-3-2-Subgraph-对象属性和方法" class="headerlink" title="4.3.2 Subgraph 对象属性和方法"></a>4.3.2 <code>Subgraph</code> 对象属性和方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 返回图中所有属性的键</span></span><br><span class="line">subgraph.keys()</span><br><span class="line"><span class="comment"># 注意：如果节点和关系具有相同的key，则只返回一个。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 返回图中节点标签集合</span></span><br><span class="line">subgraph.labels</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 返回图中节点集合</span></span><br><span class="line">subgraph.nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 返回图中所有关系集合</span></span><br><span class="line">subgraph.relationships</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 返回图中所有关系类型的集合</span></span><br><span class="line">subgraph.types()</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Nosql</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>neo4j</tag>
      </tags>
  </entry>
  <entry>
    <title>主机访问虚拟机端口</title>
    <url>/2021/08/13/%E4%B8%BB%E6%9C%BA%E8%AE%BF%E9%97%AE%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AB%AF%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="主机访问虚拟机端口"><a href="#主机访问虚拟机端口" class="headerlink" title="主机访问虚拟机端口"></a>主机访问虚拟机端口</h2><ul>
<li>默认情况下，主机可以<code>ping</code>通<code>ip</code>，主机对虚拟机端口访问连接<code>telnet</code>是连接失败。</li>
<li><code>centos7</code>以前的版本默认使用<code>iptables</code>服务进行管理防火墙规则。<code>centos7</code>以及其以上版本默认使用<code>firewalld</code>服务管理防火墙。所以在<code>centos8</code>中，就使用其默认的<code>firewalld</code>配置防火墙。<span id="more"></span>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><h4 id="1-关闭防火墙firewalld"><a href="#1-关闭防火墙firewalld" class="headerlink" title="1. 关闭防火墙firewalld"></a>1. 关闭防火墙<code>firewalld</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 停止 firewalld</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"># 禁止 firewalld 开机启动</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>
<h4 id="2-安装-iptables-service"><a href="#2-安装-iptables-service" class="headerlink" title="2. 安装 iptables service"></a>2. 安装 <code>iptables service</code></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install iptables-services</span><br></pre></td></tr></table></figure>
<h4 id="3-修改配置，添加外部访问接口"><a href="#3-修改配置，添加外部访问接口" class="headerlink" title="3. 修改配置，添加外部访问接口"></a>3. 修改配置，添加外部访问接口</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 配置文件地址：</span><br><span class="line">/etc/sysconfig/iptables</span><br><span class="line"># 添加规则</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure>
<h4 id="4-防火墙启动"><a href="#4-防火墙启动" class="headerlink" title="4. 防火墙启动"></a>4. 防火墙启动</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 重启防火墙使配置生效</span><br><span class="line">systemctl restart iptables.service</span><br><span class="line"># 设置防火墙开机启动</span><br><span class="line">systemctl enable iptables.service</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>firewalld</tag>
        <tag>iptables</tag>
      </tags>
  </entry>
</search>
